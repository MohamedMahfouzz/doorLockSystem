
doorLock_HMI_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002448  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  00002448  000024dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800192  00800192  0000260e  2**0
                  ALLOC
  3 .stab         00002238  00000000  00000000  00002610  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000143d  00000000  00000000  00004848  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005f35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008a69  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009818  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009978  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009c05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a3d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 78 0f 	jmp	0x1ef0	; 0x1ef0 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 22 12 	jmp	0x2444	; 0x2444 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e8       	ldi	r26, 0x89	; 137
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	89 e8       	ldi	r24, 0x89	; 137
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 be 11 	jmp	0x237c	; 0x237c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

/*******************************************************************************
 *                      Function Definitions                                   *
 *******************************************************************************/

int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	ef 97       	sbiw	r28, 0x3f	; 63
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	g_password[PASSWORD_LENGTH-1] = '\0';		/* Set last character in password string to NULL terminator */
     b5a:	10 92 98 01 	sts	0x0198, r1
	uint8 setup = TRUE;							/* Variable for checking of setup state on MCU*/
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	8d af       	std	Y+61, r24	; 0x3d
	uint8 changePass = FALSE;					/* Variable for checking of changing password state on MCU*/
     b62:	1c ae       	std	Y+60, r1	; 0x3c
	uint8 openDoor = FALSE;						/* Variable for checking of opening door state on MCU*/
     b64:	1b ae       	std	Y+59, r1	; 0x3b
	uint8 actionSymbol = 0;						/* Variable to hold action to be taken next */
     b66:	1a ae       	std	Y+58, r1	; 0x3a
	MCU_init();									/* Initiate MCU */
     b68:	0e 94 02 08 	call	0x1004	; 0x1004 <MCU_init>
	LCD_displayStringOnNewScreen("Welcome to your door lock system");		/* Display welcome message */
     b6c:	80 e6       	ldi	r24, 0x60	; 96
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <LCD_displayStringOnNewScreen>
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	aa ef       	ldi	r26, 0xFA	; 250
     b7a:	b4 e4       	ldi	r27, 0x44	; 68
     b7c:	8d ab       	std	Y+53, r24	; 0x35
     b7e:	9e ab       	std	Y+54, r25	; 0x36
     b80:	af ab       	std	Y+55, r26	; 0x37
     b82:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b84:	6d a9       	ldd	r22, Y+53	; 0x35
     b86:	7e a9       	ldd	r23, Y+54	; 0x36
     b88:	8f a9       	ldd	r24, Y+55	; 0x37
     b8a:	98 ad       	ldd	r25, Y+56	; 0x38
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	4a ef       	ldi	r20, 0xFA	; 250
     b92:	54 e4       	ldi	r21, 0x44	; 68
     b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b98:	dc 01       	movw	r26, r24
     b9a:	cb 01       	movw	r24, r22
     b9c:	89 ab       	std	Y+49, r24	; 0x31
     b9e:	9a ab       	std	Y+50, r25	; 0x32
     ba0:	ab ab       	std	Y+51, r26	; 0x33
     ba2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ba4:	69 a9       	ldd	r22, Y+49	; 0x31
     ba6:	7a a9       	ldd	r23, Y+50	; 0x32
     ba8:	8b a9       	ldd	r24, Y+51	; 0x33
     baa:	9c a9       	ldd	r25, Y+52	; 0x34
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	40 e8       	ldi	r20, 0x80	; 128
     bb2:	5f e3       	ldi	r21, 0x3F	; 63
     bb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bb8:	88 23       	and	r24, r24
     bba:	2c f4       	brge	.+10     	; 0xbc6 <main+0x80>
		__ticks = 1;
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	98 ab       	std	Y+48, r25	; 0x30
     bc2:	8f a7       	std	Y+47, r24	; 0x2f
     bc4:	3f c0       	rjmp	.+126    	; 0xc44 <main+0xfe>
	else if (__tmp > 65535)
     bc6:	69 a9       	ldd	r22, Y+49	; 0x31
     bc8:	7a a9       	ldd	r23, Y+50	; 0x32
     bca:	8b a9       	ldd	r24, Y+51	; 0x33
     bcc:	9c a9       	ldd	r25, Y+52	; 0x34
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	3f ef       	ldi	r19, 0xFF	; 255
     bd2:	4f e7       	ldi	r20, 0x7F	; 127
     bd4:	57 e4       	ldi	r21, 0x47	; 71
     bd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bda:	18 16       	cp	r1, r24
     bdc:	4c f5       	brge	.+82     	; 0xc30 <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bde:	6d a9       	ldd	r22, Y+53	; 0x35
     be0:	7e a9       	ldd	r23, Y+54	; 0x36
     be2:	8f a9       	ldd	r24, Y+55	; 0x37
     be4:	98 ad       	ldd	r25, Y+56	; 0x38
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	40 e2       	ldi	r20, 0x20	; 32
     bec:	51 e4       	ldi	r21, 0x41	; 65
     bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bf2:	dc 01       	movw	r26, r24
     bf4:	cb 01       	movw	r24, r22
     bf6:	bc 01       	movw	r22, r24
     bf8:	cd 01       	movw	r24, r26
     bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bfe:	dc 01       	movw	r26, r24
     c00:	cb 01       	movw	r24, r22
     c02:	98 ab       	std	Y+48, r25	; 0x30
     c04:	8f a7       	std	Y+47, r24	; 0x2f
     c06:	0f c0       	rjmp	.+30     	; 0xc26 <main+0xe0>
     c08:	88 ec       	ldi	r24, 0xC8	; 200
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	9e a7       	std	Y+46, r25	; 0x2e
     c0e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c10:	8d a5       	ldd	r24, Y+45	; 0x2d
     c12:	9e a5       	ldd	r25, Y+46	; 0x2e
     c14:	01 97       	sbiw	r24, 0x01	; 1
     c16:	f1 f7       	brne	.-4      	; 0xc14 <main+0xce>
     c18:	9e a7       	std	Y+46, r25	; 0x2e
     c1a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1c:	8f a5       	ldd	r24, Y+47	; 0x2f
     c1e:	98 a9       	ldd	r25, Y+48	; 0x30
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	98 ab       	std	Y+48, r25	; 0x30
     c24:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c26:	8f a5       	ldd	r24, Y+47	; 0x2f
     c28:	98 a9       	ldd	r25, Y+48	; 0x30
     c2a:	00 97       	sbiw	r24, 0x00	; 0
     c2c:	69 f7       	brne	.-38     	; 0xc08 <main+0xc2>
     c2e:	14 c1       	rjmp	.+552    	; 0xe58 <main+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c30:	69 a9       	ldd	r22, Y+49	; 0x31
     c32:	7a a9       	ldd	r23, Y+50	; 0x32
     c34:	8b a9       	ldd	r24, Y+51	; 0x33
     c36:	9c a9       	ldd	r25, Y+52	; 0x34
     c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	98 ab       	std	Y+48, r25	; 0x30
     c42:	8f a7       	std	Y+47, r24	; 0x2f
     c44:	8f a5       	ldd	r24, Y+47	; 0x2f
     c46:	98 a9       	ldd	r25, Y+48	; 0x30
     c48:	9c a7       	std	Y+44, r25	; 0x2c
     c4a:	8b a7       	std	Y+43, r24	; 0x2b
     c4c:	8b a5       	ldd	r24, Y+43	; 0x2b
     c4e:	9c a5       	ldd	r25, Y+44	; 0x2c
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	f1 f7       	brne	.-4      	; 0xc50 <main+0x10a>
     c54:	9c a7       	std	Y+44, r25	; 0x2c
     c56:	8b a7       	std	Y+43, r24	; 0x2b
     c58:	ff c0       	rjmp	.+510    	; 0xe58 <main+0x312>
	_delay_ms(2000);							/* Delay to message display */
	while(1){
		while(setup){														/* Enter setup state */
			LCD_displayStringOnNewScreen("Please set up your pass: ");		/* Display password setup message */
     c5a:	81 e8       	ldi	r24, 0x81	; 129
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <LCD_displayStringOnNewScreen>
			getAndSendPassword();											/* Get and send password to control MCU */
     c62:	0e 94 19 09 	call	0x1232	; 0x1232 <getAndSendPassword>
			LCD_displayStringOnNewScreen("Please confirm pass: ");			/* Display password confirmation message */
     c66:	8b e9       	ldi	r24, 0x9B	; 155
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <LCD_displayStringOnNewScreen>
			getAndSendPassword();											/* Get and send password to control MCU */
     c6e:	0e 94 19 09 	call	0x1232	; 0x1232 <getAndSendPassword>
			if (ACTION_SUCCESS == USART_receiveByte()){						/* If password set action succeeded */
     c72:	0e 94 11 11 	call	0x2222	; 0x2222 <USART_receiveByte>
     c76:	81 32       	cpi	r24, 0x21	; 33
     c78:	09 f0       	breq	.+2      	; 0xc7c <main+0x136>
     c7a:	78 c0       	rjmp	.+240    	; 0xd6c <main+0x226>
				setup = FALSE;												/* Disable setup state */
     c7c:	1d ae       	std	Y+61, r1	; 0x3d
				LCD_displayStringOnNewScreen("New password set");			/* Display password set message */
     c7e:	81 eb       	ldi	r24, 0xB1	; 177
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <LCD_displayStringOnNewScreen>
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	aa ef       	ldi	r26, 0xFA	; 250
     c8c:	b4 e4       	ldi	r27, 0x44	; 68
     c8e:	8f a3       	std	Y+39, r24	; 0x27
     c90:	98 a7       	std	Y+40, r25	; 0x28
     c92:	a9 a7       	std	Y+41, r26	; 0x29
     c94:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c96:	6f a1       	ldd	r22, Y+39	; 0x27
     c98:	78 a5       	ldd	r23, Y+40	; 0x28
     c9a:	89 a5       	ldd	r24, Y+41	; 0x29
     c9c:	9a a5       	ldd	r25, Y+42	; 0x2a
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	4a ef       	ldi	r20, 0xFA	; 250
     ca4:	54 e4       	ldi	r21, 0x44	; 68
     ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     caa:	dc 01       	movw	r26, r24
     cac:	cb 01       	movw	r24, r22
     cae:	8b a3       	std	Y+35, r24	; 0x23
     cb0:	9c a3       	std	Y+36, r25	; 0x24
     cb2:	ad a3       	std	Y+37, r26	; 0x25
     cb4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     cb6:	6b a1       	ldd	r22, Y+35	; 0x23
     cb8:	7c a1       	ldd	r23, Y+36	; 0x24
     cba:	8d a1       	ldd	r24, Y+37	; 0x25
     cbc:	9e a1       	ldd	r25, Y+38	; 0x26
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	40 e8       	ldi	r20, 0x80	; 128
     cc4:	5f e3       	ldi	r21, 0x3F	; 63
     cc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cca:	88 23       	and	r24, r24
     ccc:	2c f4       	brge	.+10     	; 0xcd8 <main+0x192>
		__ticks = 1;
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	9a a3       	std	Y+34, r25	; 0x22
     cd4:	89 a3       	std	Y+33, r24	; 0x21
     cd6:	3f c0       	rjmp	.+126    	; 0xd56 <main+0x210>
	else if (__tmp > 65535)
     cd8:	6b a1       	ldd	r22, Y+35	; 0x23
     cda:	7c a1       	ldd	r23, Y+36	; 0x24
     cdc:	8d a1       	ldd	r24, Y+37	; 0x25
     cde:	9e a1       	ldd	r25, Y+38	; 0x26
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	3f ef       	ldi	r19, 0xFF	; 255
     ce4:	4f e7       	ldi	r20, 0x7F	; 127
     ce6:	57 e4       	ldi	r21, 0x47	; 71
     ce8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cec:	18 16       	cp	r1, r24
     cee:	4c f5       	brge	.+82     	; 0xd42 <main+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf0:	6f a1       	ldd	r22, Y+39	; 0x27
     cf2:	78 a5       	ldd	r23, Y+40	; 0x28
     cf4:	89 a5       	ldd	r24, Y+41	; 0x29
     cf6:	9a a5       	ldd	r25, Y+42	; 0x2a
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e2       	ldi	r20, 0x20	; 32
     cfe:	51 e4       	ldi	r21, 0x41	; 65
     d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	bc 01       	movw	r22, r24
     d0a:	cd 01       	movw	r24, r26
     d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	9a a3       	std	Y+34, r25	; 0x22
     d16:	89 a3       	std	Y+33, r24	; 0x21
     d18:	0f c0       	rjmp	.+30     	; 0xd38 <main+0x1f2>
     d1a:	88 ec       	ldi	r24, 0xC8	; 200
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	98 a3       	std	Y+32, r25	; 0x20
     d20:	8f 8f       	std	Y+31, r24	; 0x1f
     d22:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d24:	98 a1       	ldd	r25, Y+32	; 0x20
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	f1 f7       	brne	.-4      	; 0xd26 <main+0x1e0>
     d2a:	98 a3       	std	Y+32, r25	; 0x20
     d2c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d2e:	89 a1       	ldd	r24, Y+33	; 0x21
     d30:	9a a1       	ldd	r25, Y+34	; 0x22
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	9a a3       	std	Y+34, r25	; 0x22
     d36:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d38:	89 a1       	ldd	r24, Y+33	; 0x21
     d3a:	9a a1       	ldd	r25, Y+34	; 0x22
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	69 f7       	brne	.-38     	; 0xd1a <main+0x1d4>
     d40:	31 c1       	rjmp	.+610    	; 0xfa4 <main+0x45e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d42:	6b a1       	ldd	r22, Y+35	; 0x23
     d44:	7c a1       	ldd	r23, Y+36	; 0x24
     d46:	8d a1       	ldd	r24, Y+37	; 0x25
     d48:	9e a1       	ldd	r25, Y+38	; 0x26
     d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d4e:	dc 01       	movw	r26, r24
     d50:	cb 01       	movw	r24, r22
     d52:	9a a3       	std	Y+34, r25	; 0x22
     d54:	89 a3       	std	Y+33, r24	; 0x21
     d56:	89 a1       	ldd	r24, Y+33	; 0x21
     d58:	9a a1       	ldd	r25, Y+34	; 0x22
     d5a:	9e 8f       	std	Y+30, r25	; 0x1e
     d5c:	8d 8f       	std	Y+29, r24	; 0x1d
     d5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d60:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <main+0x21c>
     d66:	9e 8f       	std	Y+30, r25	; 0x1e
     d68:	8d 8f       	std	Y+29, r24	; 0x1d
     d6a:	1c c1       	rjmp	.+568    	; 0xfa4 <main+0x45e>
				_delay_ms(2000);											/* Delay to message display */
				break;														/* Exit active state */
			}
			else{															/* If passwords did not match */
				LCD_displayStringOnNewScreen("Passwords do not match");		/* Display passwords don't match error message */
     d6c:	82 ec       	ldi	r24, 0xC2	; 194
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <LCD_displayStringOnNewScreen>
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	aa ef       	ldi	r26, 0xFA	; 250
     d7a:	b4 e4       	ldi	r27, 0x44	; 68
     d7c:	89 8f       	std	Y+25, r24	; 0x19
     d7e:	9a 8f       	std	Y+26, r25	; 0x1a
     d80:	ab 8f       	std	Y+27, r26	; 0x1b
     d82:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d84:	69 8d       	ldd	r22, Y+25	; 0x19
     d86:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d88:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	4a ef       	ldi	r20, 0xFA	; 250
     d92:	54 e4       	ldi	r21, 0x44	; 68
     d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	8d 8b       	std	Y+21, r24	; 0x15
     d9e:	9e 8b       	std	Y+22, r25	; 0x16
     da0:	af 8b       	std	Y+23, r26	; 0x17
     da2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     da4:	6d 89       	ldd	r22, Y+21	; 0x15
     da6:	7e 89       	ldd	r23, Y+22	; 0x16
     da8:	8f 89       	ldd	r24, Y+23	; 0x17
     daa:	98 8d       	ldd	r25, Y+24	; 0x18
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	40 e8       	ldi	r20, 0x80	; 128
     db2:	5f e3       	ldi	r21, 0x3F	; 63
     db4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     db8:	88 23       	and	r24, r24
     dba:	2c f4       	brge	.+10     	; 0xdc6 <main+0x280>
		__ticks = 1;
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	9c 8b       	std	Y+20, r25	; 0x14
     dc2:	8b 8b       	std	Y+19, r24	; 0x13
     dc4:	3f c0       	rjmp	.+126    	; 0xe44 <main+0x2fe>
	else if (__tmp > 65535)
     dc6:	6d 89       	ldd	r22, Y+21	; 0x15
     dc8:	7e 89       	ldd	r23, Y+22	; 0x16
     dca:	8f 89       	ldd	r24, Y+23	; 0x17
     dcc:	98 8d       	ldd	r25, Y+24	; 0x18
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	3f ef       	ldi	r19, 0xFF	; 255
     dd2:	4f e7       	ldi	r20, 0x7F	; 127
     dd4:	57 e4       	ldi	r21, 0x47	; 71
     dd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dda:	18 16       	cp	r1, r24
     ddc:	4c f5       	brge	.+82     	; 0xe30 <main+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dde:	69 8d       	ldd	r22, Y+25	; 0x19
     de0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     de2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     de4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	40 e2       	ldi	r20, 0x20	; 32
     dec:	51 e4       	ldi	r21, 0x41	; 65
     dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df2:	dc 01       	movw	r26, r24
     df4:	cb 01       	movw	r24, r22
     df6:	bc 01       	movw	r22, r24
     df8:	cd 01       	movw	r24, r26
     dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	9c 8b       	std	Y+20, r25	; 0x14
     e04:	8b 8b       	std	Y+19, r24	; 0x13
     e06:	0f c0       	rjmp	.+30     	; 0xe26 <main+0x2e0>
     e08:	88 ec       	ldi	r24, 0xC8	; 200
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	9a 8b       	std	Y+18, r25	; 0x12
     e0e:	89 8b       	std	Y+17, r24	; 0x11
     e10:	89 89       	ldd	r24, Y+17	; 0x11
     e12:	9a 89       	ldd	r25, Y+18	; 0x12
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	f1 f7       	brne	.-4      	; 0xe14 <main+0x2ce>
     e18:	9a 8b       	std	Y+18, r25	; 0x12
     e1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e1c:	8b 89       	ldd	r24, Y+19	; 0x13
     e1e:	9c 89       	ldd	r25, Y+20	; 0x14
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	9c 8b       	std	Y+20, r25	; 0x14
     e24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e26:	8b 89       	ldd	r24, Y+19	; 0x13
     e28:	9c 89       	ldd	r25, Y+20	; 0x14
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	69 f7       	brne	.-38     	; 0xe08 <main+0x2c2>
     e2e:	14 c0       	rjmp	.+40     	; 0xe58 <main+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e30:	6d 89       	ldd	r22, Y+21	; 0x15
     e32:	7e 89       	ldd	r23, Y+22	; 0x16
     e34:	8f 89       	ldd	r24, Y+23	; 0x17
     e36:	98 8d       	ldd	r25, Y+24	; 0x18
     e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e3c:	dc 01       	movw	r26, r24
     e3e:	cb 01       	movw	r24, r22
     e40:	9c 8b       	std	Y+20, r25	; 0x14
     e42:	8b 8b       	std	Y+19, r24	; 0x13
     e44:	8b 89       	ldd	r24, Y+19	; 0x13
     e46:	9c 89       	ldd	r25, Y+20	; 0x14
     e48:	98 8b       	std	Y+16, r25	; 0x10
     e4a:	8f 87       	std	Y+15, r24	; 0x0f
     e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e4e:	98 89       	ldd	r25, Y+16	; 0x10
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	f1 f7       	brne	.-4      	; 0xe50 <main+0x30a>
     e54:	98 8b       	std	Y+16, r25	; 0x10
     e56:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 actionSymbol = 0;						/* Variable to hold action to be taken next */
	MCU_init();									/* Initiate MCU */
	LCD_displayStringOnNewScreen("Welcome to your door lock system");		/* Display welcome message */
	_delay_ms(2000);							/* Delay to message display */
	while(1){
		while(setup){														/* Enter setup state */
     e58:	8d ad       	ldd	r24, Y+61	; 0x3d
     e5a:	88 23       	and	r24, r24
     e5c:	09 f0       	breq	.+2      	; 0xe60 <main+0x31a>
     e5e:	fd ce       	rjmp	.-518    	; 0xc5a <main+0x114>
     e60:	a1 c0       	rjmp	.+322    	; 0xfa4 <main+0x45e>
				_delay_ms(2000);											/* Delay to message display */
			}
		}

		while(changePass || openDoor){										/* Enter change pass and open door states */
			LCD_displayStringOnNewScreen(openDoor ? "Please enter pass: " : "Please enter old pass: ");		/* Display password request message */
     e62:	8b ad       	ldd	r24, Y+59	; 0x3b
     e64:	88 23       	and	r24, r24
     e66:	29 f0       	breq	.+10     	; 0xe72 <main+0x32c>
     e68:	89 ed       	ldi	r24, 0xD9	; 217
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	9f af       	std	Y+63, r25	; 0x3f
     e6e:	8e af       	std	Y+62, r24	; 0x3e
     e70:	04 c0       	rjmp	.+8      	; 0xe7a <main+0x334>
     e72:	8d ee       	ldi	r24, 0xED	; 237
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	9f af       	std	Y+63, r25	; 0x3f
     e78:	8e af       	std	Y+62, r24	; 0x3e
     e7a:	8e ad       	ldd	r24, Y+62	; 0x3e
     e7c:	9f ad       	ldd	r25, Y+63	; 0x3f
     e7e:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <LCD_displayStringOnNewScreen>
			getAndSendPassword();											/* Get and send password to control MCU */
     e82:	0e 94 19 09 	call	0x1232	; 0x1232 <getAndSendPassword>
			uint8 result = USART_receiveByte();								/* Receive action result */
     e86:	0e 94 11 11 	call	0x2222	; 0x2222 <USART_receiveByte>
     e8a:	89 af       	std	Y+57, r24	; 0x39
			if (ACTION_SUCCESS == result){									/* If action success code received */
     e8c:	89 ad       	ldd	r24, Y+57	; 0x39
     e8e:	81 32       	cpi	r24, 0x21	; 33
     e90:	59 f4       	brne	.+22     	; 0xea8 <main+0x362>
				if (openDoor){												/* If active state is open door state */
     e92:	8b ad       	ldd	r24, Y+59	; 0x3b
     e94:	88 23       	and	r24, r24
     e96:	21 f0       	breq	.+8      	; 0xea0 <main+0x35a>
					openDoor = FALSE;										/* Disable open door state */
     e98:	1b ae       	std	Y+59, r1	; 0x3b
					unlockSystem();											/* Unlock system */
     e9a:	0e 94 42 09 	call	0x1284	; 0x1284 <unlockSystem>
     e9e:	8a c0       	rjmp	.+276    	; 0xfb4 <main+0x46e>
				}
				else{														/* If active state is change pass state */
					changePass = FALSE;										/* Disable change pass state */
     ea0:	1c ae       	std	Y+60, r1	; 0x3c
					setup = TRUE;											/* Disable setup state */
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	8d af       	std	Y+61, r24	; 0x3d
     ea6:	86 c0       	rjmp	.+268    	; 0xfb4 <main+0x46e>
				}
				break;														/* Exit active state */
			}
			else if (ACTION_ERROR == result){								/* If error code received */
     ea8:	89 ad       	ldd	r24, Y+57	; 0x39
     eaa:	85 34       	cpi	r24, 0x45	; 69
     eac:	29 f4       	brne	.+10     	; 0xeb8 <main+0x372>
				changePass = FALSE;											/* Disable change pass state */
     eae:	1c ae       	std	Y+60, r1	; 0x3c
				openDoor = FALSE;											/* Disable open door state */
     eb0:	1b ae       	std	Y+59, r1	; 0x3b
				raiseError();												/* Start error actions */
     eb2:	0e 94 28 09 	call	0x1250	; 0x1250 <raiseError>
     eb6:	7e c0       	rjmp	.+252    	; 0xfb4 <main+0x46e>
				break;														/* Exit active state */
			}
			else{															/* If action fail code received */
				LCD_displayStringOnNewScreen("wrong password, Please try again");		/* Display wrong password message */
     eb8:	85 e0       	ldi	r24, 0x05	; 5
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <LCD_displayStringOnNewScreen>
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	aa ef       	ldi	r26, 0xFA	; 250
     ec6:	b4 e4       	ldi	r27, 0x44	; 68
     ec8:	8b 87       	std	Y+11, r24	; 0x0b
     eca:	9c 87       	std	Y+12, r25	; 0x0c
     ecc:	ad 87       	std	Y+13, r26	; 0x0d
     ece:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	4a ef       	ldi	r20, 0xFA	; 250
     ede:	54 e4       	ldi	r21, 0x44	; 68
     ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	8f 83       	std	Y+7, r24	; 0x07
     eea:	98 87       	std	Y+8, r25	; 0x08
     eec:	a9 87       	std	Y+9, r26	; 0x09
     eee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ef0:	6f 81       	ldd	r22, Y+7	; 0x07
     ef2:	78 85       	ldd	r23, Y+8	; 0x08
     ef4:	89 85       	ldd	r24, Y+9	; 0x09
     ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	40 e8       	ldi	r20, 0x80	; 128
     efe:	5f e3       	ldi	r21, 0x3F	; 63
     f00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f04:	88 23       	and	r24, r24
     f06:	2c f4       	brge	.+10     	; 0xf12 <main+0x3cc>
		__ticks = 1;
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	9e 83       	std	Y+6, r25	; 0x06
     f0e:	8d 83       	std	Y+5, r24	; 0x05
     f10:	3f c0       	rjmp	.+126    	; 0xf90 <main+0x44a>
	else if (__tmp > 65535)
     f12:	6f 81       	ldd	r22, Y+7	; 0x07
     f14:	78 85       	ldd	r23, Y+8	; 0x08
     f16:	89 85       	ldd	r24, Y+9	; 0x09
     f18:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	3f ef       	ldi	r19, 0xFF	; 255
     f1e:	4f e7       	ldi	r20, 0x7F	; 127
     f20:	57 e4       	ldi	r21, 0x47	; 71
     f22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f26:	18 16       	cp	r1, r24
     f28:	4c f5       	brge	.+82     	; 0xf7c <main+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f2a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f2c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f30:	9e 85       	ldd	r25, Y+14	; 0x0e
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	40 e2       	ldi	r20, 0x20	; 32
     f38:	51 e4       	ldi	r21, 0x41	; 65
     f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	bc 01       	movw	r22, r24
     f44:	cd 01       	movw	r24, r26
     f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	9e 83       	std	Y+6, r25	; 0x06
     f50:	8d 83       	std	Y+5, r24	; 0x05
     f52:	0f c0       	rjmp	.+30     	; 0xf72 <main+0x42c>
     f54:	88 ec       	ldi	r24, 0xC8	; 200
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	9c 83       	std	Y+4, r25	; 0x04
     f5a:	8b 83       	std	Y+3, r24	; 0x03
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	9c 81       	ldd	r25, Y+4	; 0x04
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <main+0x41a>
     f64:	9c 83       	std	Y+4, r25	; 0x04
     f66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f68:	8d 81       	ldd	r24, Y+5	; 0x05
     f6a:	9e 81       	ldd	r25, Y+6	; 0x06
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	9e 83       	std	Y+6, r25	; 0x06
     f70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f72:	8d 81       	ldd	r24, Y+5	; 0x05
     f74:	9e 81       	ldd	r25, Y+6	; 0x06
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	69 f7       	brne	.-38     	; 0xf54 <main+0x40e>
     f7a:	14 c0       	rjmp	.+40     	; 0xfa4 <main+0x45e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f7c:	6f 81       	ldd	r22, Y+7	; 0x07
     f7e:	78 85       	ldd	r23, Y+8	; 0x08
     f80:	89 85       	ldd	r24, Y+9	; 0x09
     f82:	9a 85       	ldd	r25, Y+10	; 0x0a
     f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	9e 83       	std	Y+6, r25	; 0x06
     f8e:	8d 83       	std	Y+5, r24	; 0x05
     f90:	8d 81       	ldd	r24, Y+5	; 0x05
     f92:	9e 81       	ldd	r25, Y+6	; 0x06
     f94:	9a 83       	std	Y+2, r25	; 0x02
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	9a 81       	ldd	r25, Y+2	; 0x02
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <main+0x456>
     fa0:	9a 83       	std	Y+2, r25	; 0x02
     fa2:	89 83       	std	Y+1, r24	; 0x01
				LCD_displayStringOnNewScreen("Passwords do not match");		/* Display passwords don't match error message */
				_delay_ms(2000);											/* Delay to message display */
			}
		}

		while(changePass || openDoor){										/* Enter change pass and open door states */
     fa4:	8c ad       	ldd	r24, Y+60	; 0x3c
     fa6:	88 23       	and	r24, r24
     fa8:	09 f0       	breq	.+2      	; 0xfac <main+0x466>
     faa:	5b cf       	rjmp	.-330    	; 0xe62 <main+0x31c>
     fac:	8b ad       	ldd	r24, Y+59	; 0x3b
     fae:	88 23       	and	r24, r24
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <main+0x46e>
     fb2:	57 cf       	rjmp	.-338    	; 0xe62 <main+0x31c>
				LCD_displayStringOnNewScreen("wrong password, Please try again");		/* Display wrong password message */
				_delay_ms(2000);											/* Delay to message display */
			}
		}

		if (setup)															/* If setup action enabled */
     fb4:	8d ad       	ldd	r24, Y+61	; 0x3d
     fb6:	88 23       	and	r24, r24
     fb8:	09 f0       	breq	.+2      	; 0xfbc <main+0x476>
     fba:	4e cf       	rjmp	.-356    	; 0xe58 <main+0x312>
			continue;														/* Skip rest and go to setupS action*/

		LCD_displayStringOnNewScreen("X Change pass");						/*Display available actions message part 1 */
     fbc:	86 e2       	ldi	r24, 0x26	; 38
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <LCD_displayStringOnNewScreen>
		LCD_displayStringRowColumn(1, 0, "- Open door");					/*Display available actions message part 2 */
     fc4:	24 e3       	ldi	r18, 0x34	; 52
     fc6:	31 e0       	ldi	r19, 0x01	; 1
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	60 e0       	ldi	r22, 0x00	; 0
     fcc:	a9 01       	movw	r20, r18
     fce:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <LCD_displayStringRowColumn>

		do{																	/* Keep looping while checking for user input */
			actionSymbol = KEYPAD_getPressed();								/* Get user input */
     fd2:	0e 94 65 09 	call	0x12ca	; 0x12ca <KEYPAD_getPressed>
     fd6:	8a af       	std	Y+58, r24	; 0x3a
		}while('*' != actionSymbol && '-' != actionSymbol);					/* Wait until input received is an action */
     fd8:	8a ad       	ldd	r24, Y+58	; 0x3a
     fda:	8a 32       	cpi	r24, 0x2A	; 42
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <main+0x49e>
     fde:	8a ad       	ldd	r24, Y+58	; 0x3a
     fe0:	8d 32       	cpi	r24, 0x2D	; 45
     fe2:	b9 f7       	brne	.-18     	; 0xfd2 <main+0x48c>

		USART_sendByte(actionSymbol);										/* Send action to control MCU */
     fe4:	8a ad       	ldd	r24, Y+58	; 0x3a
     fe6:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <USART_sendByte>
		if ('*' == actionSymbol)											/* If change pass action received */
     fea:	8a ad       	ldd	r24, Y+58	; 0x3a
     fec:	8a 32       	cpi	r24, 0x2A	; 42
     fee:	19 f4       	brne	.+6      	; 0xff6 <main+0x4b0>
			changePass = TRUE;												/* Enable change pass state */
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	8c af       	std	Y+60, r24	; 0x3c
     ff4:	05 c0       	rjmp	.+10     	; 0x1000 <main+0x4ba>
		else if ('-' == actionSymbol)										/* If open door action received */
     ff6:	8a ad       	ldd	r24, Y+58	; 0x3a
     ff8:	8d 32       	cpi	r24, 0x2D	; 45
     ffa:	11 f4       	brne	.+4      	; 0x1000 <main+0x4ba>
			openDoor = TRUE;												/* Enable open door state */
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	8b af       	std	Y+59, r24	; 0x3b
		actionSymbol = 0;													/* Reset action symbol*/
    1000:	1a ae       	std	Y+58, r1	; 0x3a
    1002:	2a cf       	rjmp	.-428    	; 0xe58 <main+0x312>

00001004 <MCU_init>:
 * [Function Name]	: MCU_init
 * [Description]	: Initialize the MicroController Unit
 * [Args]			: N/A
 * [Returns]		: N/A
 *******************************************************************************/
void MCU_init(void){
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	2c 97       	sbiw	r28, 0x0c	; 12
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
	 * Baud Rate		= BAUD_RATE_9600	-> set baud rate to 9600 bits per second
	 * Character size	= EIGHT_BITS		-> Set data transfer size to 8 bits
	 * Parity			= DISABLED			-> Disable parity bit
	 * Stop bit			= ONE_BIT			-> Set only 1 stop bit
	 */
	Usart_ConfigType usart_configuration = {BAUD_RATE_9600, EIGHT_BITS, DISABLED, ONE_BIT};
    1018:	19 82       	std	Y+1, r1	; 0x01
    101a:	1a 82       	std	Y+2, r1	; 0x02
    101c:	1b 82       	std	Y+3, r1	; 0x03
    101e:	1c 82       	std	Y+4, r1	; 0x04
    1020:	80 e8       	ldi	r24, 0x80	; 128
    1022:	89 83       	std	Y+1, r24	; 0x01
    1024:	85 e2       	ldi	r24, 0x25	; 37
    1026:	8a 83       	std	Y+2, r24	; 0x02
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	8e 7f       	andi	r24, 0xFE	; 254
    102c:	8b 83       	std	Y+3, r24	; 0x03
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	87 7c       	andi	r24, 0xC7	; 199
    1032:	88 61       	ori	r24, 0x18	; 24
    1034:	8b 83       	std	Y+3, r24	; 0x03
	 * Waveform generation mode	= CLEAR_TIMER_COMPARE_ICR1	-> Clear timer compare mode
	 * Clock prescaler			= FCPU_256					-> divide MCU clock by 256
	 * Compare match output A	= NORMAL_OPERATION			-> Normal pin operation for OCR1A
	 * Compare match output B	= NORMAL_OPERATION			-> Normal pin operation for OCR1B
	 */
	TIMERS_ConfigType timer_configuration = {0, 31250, CLEAR_TIMER_COMPARE_ICR1, FCPU_256, NORMAL_OPERATION, NORMAL_OPERATION};
    1036:	88 e0       	ldi	r24, 0x08	; 8
    1038:	fe 01       	movw	r30, r28
    103a:	35 96       	adiw	r30, 0x05	; 5
    103c:	df 01       	movw	r26, r30
    103e:	98 2f       	mov	r25, r24
    1040:	1d 92       	st	X+, r1
    1042:	9a 95       	dec	r25
    1044:	e9 f7       	brne	.-6      	; 0x1040 <MCU_init+0x3c>
    1046:	82 e1       	ldi	r24, 0x12	; 18
    1048:	9a e7       	ldi	r25, 0x7A	; 122
    104a:	98 87       	std	Y+8, r25	; 0x08
    104c:	8f 83       	std	Y+7, r24	; 0x07
    104e:	89 85       	ldd	r24, Y+9	; 0x09
    1050:	80 7f       	andi	r24, 0xF0	; 240
    1052:	8c 60       	ori	r24, 0x0C	; 12
    1054:	89 87       	std	Y+9, r24	; 0x09
    1056:	8a 85       	ldd	r24, Y+10	; 0x0a
    1058:	88 7f       	andi	r24, 0xF8	; 248
    105a:	84 60       	ori	r24, 0x04	; 4
    105c:	8a 87       	std	Y+10, r24	; 0x0a

	/* Clear I-bit from status register to not detect interrupts */
	cli();
    105e:	f8 94       	cli

	/* Initialize LCD screen */
	LCD_init();
    1060:	0e 94 5f 0c 	call	0x18be	; 0x18be <LCD_init>

	/* Initiate USART communication protocol with provided configurations */
	USART_init(&usart_configuration);
    1064:	ce 01       	movw	r24, r28
    1066:	01 96       	adiw	r24, 0x01	; 1
    1068:	0e 94 8e 10 	call	0x211c	; 0x211c <USART_init>

	/* Initiate timer 1 with provided configurations */
	TIMER1_init(&timer_configuration);
    106c:	ce 01       	movw	r24, r28
    106e:	05 96       	adiw	r24, 0x05	; 5
    1070:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <TIMER1_init>

	/* Set I-bit in status register to detect interrupts */
	sei();
    1074:	78 94       	sei
}
    1076:	2c 96       	adiw	r28, 0x0c	; 12
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <resetPassword>:
 * [Function Name]	: resetPassword
 * [Description]	: Reset password array
 * [Args]			: N/A
 * [Returns]		: N/A
 *******************************************************************************/
void resetPassword(void){
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	00 d0       	rcall	.+0      	; 0x108e <resetPassword+0x6>
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
	for(int i = 0; i < PASSWORD_LENGTH-1; i++)		/* Loop through password received */
    1092:	1a 82       	std	Y+2, r1	; 0x02
    1094:	19 82       	std	Y+1, r1	; 0x01
    1096:	0c c0       	rjmp	.+24     	; 0x10b0 <resetPassword+0x28>
		g_password[i] = '*';						/* Set value to * */
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	9a 81       	ldd	r25, Y+2	; 0x02
    109c:	fc 01       	movw	r30, r24
    109e:	ed 56       	subi	r30, 0x6D	; 109
    10a0:	fe 4f       	sbci	r31, 0xFE	; 254
    10a2:	8a e2       	ldi	r24, 0x2A	; 42
    10a4:	80 83       	st	Z, r24
 * [Description]	: Reset password array
 * [Args]			: N/A
 * [Returns]		: N/A
 *******************************************************************************/
void resetPassword(void){
	for(int i = 0; i < PASSWORD_LENGTH-1; i++)		/* Loop through password received */
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	9a 81       	ldd	r25, Y+2	; 0x02
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	9a 83       	std	Y+2, r25	; 0x02
    10ae:	89 83       	std	Y+1, r24	; 0x01
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	9a 81       	ldd	r25, Y+2	; 0x02
    10b4:	85 30       	cpi	r24, 0x05	; 5
    10b6:	91 05       	cpc	r25, r1
    10b8:	7c f3       	brlt	.-34     	; 0x1098 <resetPassword+0x10>
		g_password[i] = '*';						/* Set value to * */
}
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <getPassword>:
 * [Function Name]	: getPassword
 * [Description]	: Get password from user
 * [Args]			: N/A
 * [Returns]		: N/A
 *******************************************************************************/
void getPassword(void){
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	2f 97       	sbiw	r28, 0x0f	; 15
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
	uint8 passwordIterator = 0;										/* Variable to iterate over password string */
    10dc:	1f 86       	std	Y+15, r1	; 0x0f
    10de:	96 c0       	rjmp	.+300    	; 0x120c <getPassword+0x148>
	while(passwordIterator != PASSWORD_LENGTH-1){					/* Loop until full password ready */
		g_password[passwordIterator] = KEYPAD_getPressed() + '0';	/* Assign received input to password */
    10e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e2:	08 2f       	mov	r16, r24
    10e4:	10 e0       	ldi	r17, 0x00	; 0
    10e6:	0e 94 65 09 	call	0x12ca	; 0x12ca <KEYPAD_getPressed>
    10ea:	80 5d       	subi	r24, 0xD0	; 208
    10ec:	f8 01       	movw	r30, r16
    10ee:	ed 56       	subi	r30, 0x6D	; 109
    10f0:	fe 4f       	sbci	r31, 0xFE	; 254
    10f2:	80 83       	st	Z, r24
		if (g_password[passwordIterator] >= '0' && g_password[passwordIterator] <= '9'){	/* Check if received character is valid */
    10f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10f6:	88 2f       	mov	r24, r24
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	fc 01       	movw	r30, r24
    10fc:	ed 56       	subi	r30, 0x6D	; 109
    10fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1100:	80 81       	ld	r24, Z
    1102:	80 33       	cpi	r24, 0x30	; 48
    1104:	08 f4       	brcc	.+2      	; 0x1108 <getPassword+0x44>
    1106:	82 c0       	rjmp	.+260    	; 0x120c <getPassword+0x148>
    1108:	8f 85       	ldd	r24, Y+15	; 0x0f
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	fc 01       	movw	r30, r24
    1110:	ed 56       	subi	r30, 0x6D	; 109
    1112:	fe 4f       	sbci	r31, 0xFE	; 254
    1114:	80 81       	ld	r24, Z
    1116:	8a 33       	cpi	r24, 0x3A	; 58
    1118:	08 f0       	brcs	.+2      	; 0x111c <getPassword+0x58>
    111a:	78 c0       	rjmp	.+240    	; 0x120c <getPassword+0x148>
			passwordIterator++;										/* Increment password iterator */
    111c:	8f 85       	ldd	r24, Y+15	; 0x0f
    111e:	8f 5f       	subi	r24, 0xFF	; 255
    1120:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_displayCharacter('*');								/* Display * in place of input character */
    1122:	8a e2       	ldi	r24, 0x2A	; 42
    1124:	0e 94 77 0c 	call	0x18ee	; 0x18ee <LCD_displayCharacter>
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	aa ef       	ldi	r26, 0xFA	; 250
    112e:	b3 e4       	ldi	r27, 0x43	; 67
    1130:	8b 87       	std	Y+11, r24	; 0x0b
    1132:	9c 87       	std	Y+12, r25	; 0x0c
    1134:	ad 87       	std	Y+13, r26	; 0x0d
    1136:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1138:	6b 85       	ldd	r22, Y+11	; 0x0b
    113a:	7c 85       	ldd	r23, Y+12	; 0x0c
    113c:	8d 85       	ldd	r24, Y+13	; 0x0d
    113e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	4a ef       	ldi	r20, 0xFA	; 250
    1146:	54 e4       	ldi	r21, 0x44	; 68
    1148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	8f 83       	std	Y+7, r24	; 0x07
    1152:	98 87       	std	Y+8, r25	; 0x08
    1154:	a9 87       	std	Y+9, r26	; 0x09
    1156:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1158:	6f 81       	ldd	r22, Y+7	; 0x07
    115a:	78 85       	ldd	r23, Y+8	; 0x08
    115c:	89 85       	ldd	r24, Y+9	; 0x09
    115e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	40 e8       	ldi	r20, 0x80	; 128
    1166:	5f e3       	ldi	r21, 0x3F	; 63
    1168:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    116c:	88 23       	and	r24, r24
    116e:	2c f4       	brge	.+10     	; 0x117a <getPassword+0xb6>
		__ticks = 1;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	9e 83       	std	Y+6, r25	; 0x06
    1176:	8d 83       	std	Y+5, r24	; 0x05
    1178:	3f c0       	rjmp	.+126    	; 0x11f8 <getPassword+0x134>
	else if (__tmp > 65535)
    117a:	6f 81       	ldd	r22, Y+7	; 0x07
    117c:	78 85       	ldd	r23, Y+8	; 0x08
    117e:	89 85       	ldd	r24, Y+9	; 0x09
    1180:	9a 85       	ldd	r25, Y+10	; 0x0a
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	3f ef       	ldi	r19, 0xFF	; 255
    1186:	4f e7       	ldi	r20, 0x7F	; 127
    1188:	57 e4       	ldi	r21, 0x47	; 71
    118a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    118e:	18 16       	cp	r1, r24
    1190:	4c f5       	brge	.+82     	; 0x11e4 <getPassword+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1192:	6b 85       	ldd	r22, Y+11	; 0x0b
    1194:	7c 85       	ldd	r23, Y+12	; 0x0c
    1196:	8d 85       	ldd	r24, Y+13	; 0x0d
    1198:	9e 85       	ldd	r25, Y+14	; 0x0e
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	40 e2       	ldi	r20, 0x20	; 32
    11a0:	51 e4       	ldi	r21, 0x41	; 65
    11a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	bc 01       	movw	r22, r24
    11ac:	cd 01       	movw	r24, r26
    11ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	9e 83       	std	Y+6, r25	; 0x06
    11b8:	8d 83       	std	Y+5, r24	; 0x05
    11ba:	0f c0       	rjmp	.+30     	; 0x11da <getPassword+0x116>
    11bc:	88 ec       	ldi	r24, 0xC8	; 200
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	9c 83       	std	Y+4, r25	; 0x04
    11c2:	8b 83       	std	Y+3, r24	; 0x03
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	9c 81       	ldd	r25, Y+4	; 0x04
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	f1 f7       	brne	.-4      	; 0x11c8 <getPassword+0x104>
    11cc:	9c 83       	std	Y+4, r25	; 0x04
    11ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d0:	8d 81       	ldd	r24, Y+5	; 0x05
    11d2:	9e 81       	ldd	r25, Y+6	; 0x06
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	9e 83       	std	Y+6, r25	; 0x06
    11d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11da:	8d 81       	ldd	r24, Y+5	; 0x05
    11dc:	9e 81       	ldd	r25, Y+6	; 0x06
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	69 f7       	brne	.-38     	; 0x11bc <getPassword+0xf8>
    11e2:	14 c0       	rjmp	.+40     	; 0x120c <getPassword+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e4:	6f 81       	ldd	r22, Y+7	; 0x07
    11e6:	78 85       	ldd	r23, Y+8	; 0x08
    11e8:	89 85       	ldd	r24, Y+9	; 0x09
    11ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	9e 83       	std	Y+6, r25	; 0x06
    11f6:	8d 83       	std	Y+5, r24	; 0x05
    11f8:	8d 81       	ldd	r24, Y+5	; 0x05
    11fa:	9e 81       	ldd	r25, Y+6	; 0x06
    11fc:	9a 83       	std	Y+2, r25	; 0x02
    11fe:	89 83       	std	Y+1, r24	; 0x01
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	9a 81       	ldd	r25, Y+2	; 0x02
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	f1 f7       	brne	.-4      	; 0x1204 <getPassword+0x140>
    1208:	9a 83       	std	Y+2, r25	; 0x02
    120a:	89 83       	std	Y+1, r24	; 0x01
 * [Args]			: N/A
 * [Returns]		: N/A
 *******************************************************************************/
void getPassword(void){
	uint8 passwordIterator = 0;										/* Variable to iterate over password string */
	while(passwordIterator != PASSWORD_LENGTH-1){					/* Loop until full password ready */
    120c:	8f 85       	ldd	r24, Y+15	; 0x0f
    120e:	85 30       	cpi	r24, 0x05	; 5
    1210:	09 f0       	breq	.+2      	; 0x1214 <getPassword+0x150>
    1212:	66 cf       	rjmp	.-308    	; 0x10e0 <getPassword+0x1c>
			passwordIterator++;										/* Increment password iterator */
			LCD_displayCharacter('*');								/* Display * in place of input character */
			_delay_ms(500);											/* Delay to avoid duplicate input */
		}
	}
	while ('=' != KEYPAD_getPressed());								/* Wait for completed character */
    1214:	0e 94 65 09 	call	0x12ca	; 0x12ca <KEYPAD_getPressed>
    1218:	8d 33       	cpi	r24, 0x3D	; 61
    121a:	e1 f7       	brne	.-8      	; 0x1214 <getPassword+0x150>
}
    121c:	2f 96       	adiw	r28, 0x0f	; 15
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	08 95       	ret

00001232 <getAndSendPassword>:
 * [Function Name]	: getAndSendPassword
 * [Description]	: Get password from user and send to control MCU
 * [Args]			: N/A
 * [Returns]		: N/A
 *******************************************************************************/
void getAndSendPassword(void){
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
	getPassword();						/* Get password from user */
    123a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <getPassword>
	USART_sendString(g_password);		/* Send password to control MCU */
    123e:	83 e9       	ldi	r24, 0x93	; 147
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	0e 94 20 11 	call	0x2240	; 0x2240 <USART_sendString>
	resetPassword();					/* Reset password array */
    1246:	0e 94 44 08 	call	0x1088	; 0x1088 <resetPassword>
}
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <raiseError>:
 * [Function Name]	: raiseError
 * [Description]	: Start MCU error actions
 * [Args]			: N/A
 * [Returns]		: N/A
 *******************************************************************************/
void raiseError(void){
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
	TIMER1_start();											/* Start timer 1 */
    1258:	0e 94 37 10 	call	0x206e	; 0x206e <TIMER1_start>
	LCD_displayStringOnNewScreen("     ERROR!     ");		/* Display error message part 1 */
    125c:	80 e4       	ldi	r24, 0x40	; 64
    125e:	91 e0       	ldi	r25, 0x01	; 1
    1260:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <LCD_displayStringOnNewScreen>
	LCD_displayStringRowColumn(1, 0, " SYSTEM LOCKED! ");	/* Display error message part 2 */
    1264:	21 e5       	ldi	r18, 0x51	; 81
    1266:	31 e0       	ldi	r19, 0x01	; 1
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	a9 01       	movw	r20, r18
    126e:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <LCD_displayStringRowColumn>
	while(g_timePassed <= 60);								/* Wait for 1 minute */
    1272:	80 91 99 01 	lds	r24, 0x0199
    1276:	8d 33       	cpi	r24, 0x3D	; 61
    1278:	e0 f3       	brcs	.-8      	; 0x1272 <raiseError+0x22>
	TIMER1_stop();											/* Stop timer 1 */
    127a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <TIMER1_stop>
}
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <unlockSystem>:
 * [Function Name]	: unlockSystem
 * [Description]	: Start MCU unlocking actions
 * [Args]			: N/A
 * [Returns]		: N/A
 *******************************************************************************/
void unlockSystem(void){
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
	TIMER1_start();									/* Start timer 1 */
    128c:	0e 94 37 10 	call	0x206e	; 0x206e <TIMER1_start>
	LCD_displayStringOnNewScreen("Opening door");	/* Display door opening message */
    1290:	82 e6       	ldi	r24, 0x62	; 98
    1292:	91 e0       	ldi	r25, 0x01	; 1
    1294:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <LCD_displayStringOnNewScreen>
	while(g_timePassed <= 15);						/* Wait for 15 seconds */
    1298:	80 91 99 01 	lds	r24, 0x0199
    129c:	80 31       	cpi	r24, 0x10	; 16
    129e:	e0 f3       	brcs	.-8      	; 0x1298 <unlockSystem+0x14>
	LCD_displayStringOnNewScreen("Door is open");	/* Display door open message */
    12a0:	8f e6       	ldi	r24, 0x6F	; 111
    12a2:	91 e0       	ldi	r25, 0x01	; 1
    12a4:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <LCD_displayStringOnNewScreen>
	while(g_timePassed <= 18);						/* Wait for 3 seconds */
    12a8:	80 91 99 01 	lds	r24, 0x0199
    12ac:	83 31       	cpi	r24, 0x13	; 19
    12ae:	e0 f3       	brcs	.-8      	; 0x12a8 <unlockSystem+0x24>
	LCD_displayStringOnNewScreen("Closing door");	/* Display door closing message */
    12b0:	8c e7       	ldi	r24, 0x7C	; 124
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <LCD_displayStringOnNewScreen>
	while(g_timePassed <= 33);						/* Wait for 15 seconds */
    12b8:	80 91 99 01 	lds	r24, 0x0199
    12bc:	82 32       	cpi	r24, 0x22	; 34
    12be:	e0 f3       	brcs	.-8      	; 0x12b8 <unlockSystem+0x34>
	TIMER1_stop();									/* Stop timer 1 */
    12c0:	0e 94 5e 10 	call	0x20bc	; 0x20bc <TIMER1_stop>
}
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <KEYPAD_getPressed>:
 * [Function Name]	: Keypad_getPressed
 * [Description]	: Function responsible for getting the key pressed on the keypad
 * [Args]			: N/A
 * [Returns]		: [unsigned character] key pressed on keypad
 *******************************************************************************/
uint8 KEYPAD_getPressed(void){
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <KEYPAD_getPressed+0x6>
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
	while(1){
		for (uint8 col = 0; col < N_COL; col++){		/* Loop to pass through all columns */
    12d4:	1a 82       	std	Y+2, r1	; 0x02
    12d6:	4c c0       	rjmp	.+152    	; 0x1370 <KEYPAD_getPressed+0xa6>
			KEYPAD_PORT_DIR = 0x10<<col;				/* Setting 1 column as output at a time */
    12d8:	ea e3       	ldi	r30, 0x3A	; 58
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	80 e1       	ldi	r24, 0x10	; 16
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <KEYPAD_getPressed+0x22>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	2a 95       	dec	r18
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <KEYPAD_getPressed+0x1e>
    12f0:	80 83       	st	Z, r24
			KEYPAD_PORT_OUT = ~(0x10<<col);				/* Setting current column output as 0 and activating pull-up resistor for all rows */
    12f2:	eb e3       	ldi	r30, 0x3B	; 59
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	80 e1       	ldi	r24, 0x10	; 16
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <KEYPAD_getPressed+0x3e>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <KEYPAD_getPressed+0x3a>
    130c:	80 95       	com	r24
    130e:	80 83       	st	Z, r24
			for (uint8 row = 0; row < N_ROW; row++){	/* Loop to pass through all rows for currently active column */
    1310:	19 82       	std	Y+1, r1	; 0x01
    1312:	28 c0       	rjmp	.+80     	; 0x1364 <KEYPAD_getPressed+0x9a>
				if (BIT_IS_CLEAR(KEYPAD_PORT_IN, row)){	/* Check if key pressed in any row */
    1314:	e9 e3       	ldi	r30, 0x39	; 57
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a9 01       	movw	r20, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <KEYPAD_getPressed+0x62>
    1328:	56 95       	lsr	r21
    132a:	47 95       	ror	r20
    132c:	8a 95       	dec	r24
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <KEYPAD_getPressed+0x5e>
    1330:	ca 01       	movw	r24, r20
    1332:	81 70       	andi	r24, 0x01	; 1
    1334:	90 70       	andi	r25, 0x00	; 0
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	91 f4       	brne	.+36     	; 0x135e <KEYPAD_getPressed+0x94>
#if N_COL == 3
					return KEYPAD_4x3_adjustSwitchNumber((row*N_COL)+col+1);	/* return value of key pressed */
#elif N_COL == 4
					return KEYPAD_4x4_adjustSwitchNumber((row*N_COL)+col+1);	/* return value of key pressed */
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	88 2f       	mov	r24, r24
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	98 2f       	mov	r25, r24
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	89 0f       	add	r24, r25
    134e:	8f 5f       	subi	r24, 0xFF	; 255
    1350:	0e 94 bd 09 	call	0x137a	; 0x137a <KEYPAD_4x4_adjustSwitchNumber>
#endif
				}
			}
		}
	}
}
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret
uint8 KEYPAD_getPressed(void){
	while(1){
		for (uint8 col = 0; col < N_COL; col++){		/* Loop to pass through all columns */
			KEYPAD_PORT_DIR = 0x10<<col;				/* Setting 1 column as output at a time */
			KEYPAD_PORT_OUT = ~(0x10<<col);				/* Setting current column output as 0 and activating pull-up resistor for all rows */
			for (uint8 row = 0; row < N_ROW; row++){	/* Loop to pass through all rows for currently active column */
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	8f 5f       	subi	r24, 0xFF	; 255
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	84 30       	cpi	r24, 0x04	; 4
    1368:	a8 f2       	brcs	.-86     	; 0x1314 <KEYPAD_getPressed+0x4a>
 * [Args]			: N/A
 * [Returns]		: [unsigned character] key pressed on keypad
 *******************************************************************************/
uint8 KEYPAD_getPressed(void){
	while(1){
		for (uint8 col = 0; col < N_COL; col++){		/* Loop to pass through all columns */
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	8f 5f       	subi	r24, 0xFF	; 255
    136e:	8a 83       	std	Y+2, r24	; 0x02
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	84 30       	cpi	r24, 0x04	; 4
    1374:	08 f4       	brcc	.+2      	; 0x1378 <KEYPAD_getPressed+0xae>
    1376:	b0 cf       	rjmp	.-160    	; 0x12d8 <KEYPAD_getPressed+0xe>
    1378:	ad cf       	rjmp	.-166    	; 0x12d4 <KEYPAD_getPressed+0xa>

0000137a <KEYPAD_4x4_adjustSwitchNumber>:
 * 		[IN] unsigned char a_keyNumber
 * 					: index of key pressed on keypad
 *
 * [Returns]		: [unsigned character] key pressed on keypad
 *******************************************************************************/
static uint8 KEYPAD_4x4_adjustSwitchNumber(uint8 a_keyNumber){
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	00 d0       	rcall	.+0      	; 0x1380 <KEYPAD_4x4_adjustSwitchNumber+0x6>
    1380:	00 d0       	rcall	.+0      	; 0x1382 <KEYPAD_4x4_adjustSwitchNumber+0x8>
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	89 83       	std	Y+1, r24	; 0x01

	switch(a_keyNumber)
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	3c 83       	std	Y+4, r19	; 0x04
    1390:	2b 83       	std	Y+3, r18	; 0x03
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	88 30       	cpi	r24, 0x08	; 8
    1398:	91 05       	cpc	r25, r1
    139a:	09 f4       	brne	.+2      	; 0x139e <KEYPAD_4x4_adjustSwitchNumber+0x24>
    139c:	70 c0       	rjmp	.+224    	; 0x147e <KEYPAD_4x4_adjustSwitchNumber+0x104>
    139e:	2b 81       	ldd	r18, Y+3	; 0x03
    13a0:	3c 81       	ldd	r19, Y+4	; 0x04
    13a2:	29 30       	cpi	r18, 0x09	; 9
    13a4:	31 05       	cpc	r19, r1
    13a6:	5c f5       	brge	.+86     	; 0x13fe <KEYPAD_4x4_adjustSwitchNumber+0x84>
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	84 30       	cpi	r24, 0x04	; 4
    13ae:	91 05       	cpc	r25, r1
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <KEYPAD_4x4_adjustSwitchNumber+0x3a>
    13b2:	59 c0       	rjmp	.+178    	; 0x1466 <KEYPAD_4x4_adjustSwitchNumber+0xec>
    13b4:	2b 81       	ldd	r18, Y+3	; 0x03
    13b6:	3c 81       	ldd	r19, Y+4	; 0x04
    13b8:	25 30       	cpi	r18, 0x05	; 5
    13ba:	31 05       	cpc	r19, r1
    13bc:	9c f4       	brge	.+38     	; 0x13e4 <KEYPAD_4x4_adjustSwitchNumber+0x6a>
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	82 30       	cpi	r24, 0x02	; 2
    13c4:	91 05       	cpc	r25, r1
    13c6:	09 f4       	brne	.+2      	; 0x13ca <KEYPAD_4x4_adjustSwitchNumber+0x50>
    13c8:	48 c0       	rjmp	.+144    	; 0x145a <KEYPAD_4x4_adjustSwitchNumber+0xe0>
    13ca:	2b 81       	ldd	r18, Y+3	; 0x03
    13cc:	3c 81       	ldd	r19, Y+4	; 0x04
    13ce:	23 30       	cpi	r18, 0x03	; 3
    13d0:	31 05       	cpc	r19, r1
    13d2:	0c f0       	brlt	.+2      	; 0x13d6 <KEYPAD_4x4_adjustSwitchNumber+0x5c>
    13d4:	45 c0       	rjmp	.+138    	; 0x1460 <KEYPAD_4x4_adjustSwitchNumber+0xe6>
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	9c 81       	ldd	r25, Y+4	; 0x04
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	91 05       	cpc	r25, r1
    13de:	09 f4       	brne	.+2      	; 0x13e2 <KEYPAD_4x4_adjustSwitchNumber+0x68>
    13e0:	39 c0       	rjmp	.+114    	; 0x1454 <KEYPAD_4x4_adjustSwitchNumber+0xda>
    13e2:	67 c0       	rjmp	.+206    	; 0x14b2 <KEYPAD_4x4_adjustSwitchNumber+0x138>
    13e4:	2b 81       	ldd	r18, Y+3	; 0x03
    13e6:	3c 81       	ldd	r19, Y+4	; 0x04
    13e8:	26 30       	cpi	r18, 0x06	; 6
    13ea:	31 05       	cpc	r19, r1
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <KEYPAD_4x4_adjustSwitchNumber+0x76>
    13ee:	41 c0       	rjmp	.+130    	; 0x1472 <KEYPAD_4x4_adjustSwitchNumber+0xf8>
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	9c 81       	ldd	r25, Y+4	; 0x04
    13f4:	87 30       	cpi	r24, 0x07	; 7
    13f6:	91 05       	cpc	r25, r1
    13f8:	0c f0       	brlt	.+2      	; 0x13fc <KEYPAD_4x4_adjustSwitchNumber+0x82>
    13fa:	3e c0       	rjmp	.+124    	; 0x1478 <KEYPAD_4x4_adjustSwitchNumber+0xfe>
    13fc:	37 c0       	rjmp	.+110    	; 0x146c <KEYPAD_4x4_adjustSwitchNumber+0xf2>
    13fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1400:	3c 81       	ldd	r19, Y+4	; 0x04
    1402:	2c 30       	cpi	r18, 0x0C	; 12
    1404:	31 05       	cpc	r19, r1
    1406:	09 f4       	brne	.+2      	; 0x140a <KEYPAD_4x4_adjustSwitchNumber+0x90>
    1408:	46 c0       	rjmp	.+140    	; 0x1496 <KEYPAD_4x4_adjustSwitchNumber+0x11c>
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
    140e:	8d 30       	cpi	r24, 0x0D	; 13
    1410:	91 05       	cpc	r25, r1
    1412:	5c f4       	brge	.+22     	; 0x142a <KEYPAD_4x4_adjustSwitchNumber+0xb0>
    1414:	2b 81       	ldd	r18, Y+3	; 0x03
    1416:	3c 81       	ldd	r19, Y+4	; 0x04
    1418:	2a 30       	cpi	r18, 0x0A	; 10
    141a:	31 05       	cpc	r19, r1
    141c:	b1 f1       	breq	.+108    	; 0x148a <KEYPAD_4x4_adjustSwitchNumber+0x110>
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	9c 81       	ldd	r25, Y+4	; 0x04
    1422:	8b 30       	cpi	r24, 0x0B	; 11
    1424:	91 05       	cpc	r25, r1
    1426:	a4 f5       	brge	.+104    	; 0x1490 <KEYPAD_4x4_adjustSwitchNumber+0x116>
    1428:	2d c0       	rjmp	.+90     	; 0x1484 <KEYPAD_4x4_adjustSwitchNumber+0x10a>
    142a:	2b 81       	ldd	r18, Y+3	; 0x03
    142c:	3c 81       	ldd	r19, Y+4	; 0x04
    142e:	2e 30       	cpi	r18, 0x0E	; 14
    1430:	31 05       	cpc	r19, r1
    1432:	b9 f1       	breq	.+110    	; 0x14a2 <KEYPAD_4x4_adjustSwitchNumber+0x128>
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	8e 30       	cpi	r24, 0x0E	; 14
    143a:	91 05       	cpc	r25, r1
    143c:	7c f1       	brlt	.+94     	; 0x149c <KEYPAD_4x4_adjustSwitchNumber+0x122>
    143e:	2b 81       	ldd	r18, Y+3	; 0x03
    1440:	3c 81       	ldd	r19, Y+4	; 0x04
    1442:	2f 30       	cpi	r18, 0x0F	; 15
    1444:	31 05       	cpc	r19, r1
    1446:	79 f1       	breq	.+94     	; 0x14a6 <KEYPAD_4x4_adjustSwitchNumber+0x12c>
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	80 31       	cpi	r24, 0x10	; 16
    144e:	91 05       	cpc	r25, r1
    1450:	69 f1       	breq	.+90     	; 0x14ac <KEYPAD_4x4_adjustSwitchNumber+0x132>
    1452:	2f c0       	rjmp	.+94     	; 0x14b2 <KEYPAD_4x4_adjustSwitchNumber+0x138>
	{
	case 1: return 7;
    1454:	97 e0       	ldi	r25, 0x07	; 7
    1456:	9a 83       	std	Y+2, r25	; 0x02
    1458:	2e c0       	rjmp	.+92     	; 0x14b6 <KEYPAD_4x4_adjustSwitchNumber+0x13c>

	case 2: return 8;
    145a:	28 e0       	ldi	r18, 0x08	; 8
    145c:	2a 83       	std	Y+2, r18	; 0x02
    145e:	2b c0       	rjmp	.+86     	; 0x14b6 <KEYPAD_4x4_adjustSwitchNumber+0x13c>

	case 3: return 9;
    1460:	39 e0       	ldi	r19, 0x09	; 9
    1462:	3a 83       	std	Y+2, r19	; 0x02
    1464:	28 c0       	rjmp	.+80     	; 0x14b6 <KEYPAD_4x4_adjustSwitchNumber+0x13c>

	case 4: return '/'; 	/* ASCII Code of / */
    1466:	8f e2       	ldi	r24, 0x2F	; 47
    1468:	8a 83       	std	Y+2, r24	; 0x02
    146a:	25 c0       	rjmp	.+74     	; 0x14b6 <KEYPAD_4x4_adjustSwitchNumber+0x13c>

	case 5: return 4;
    146c:	94 e0       	ldi	r25, 0x04	; 4
    146e:	9a 83       	std	Y+2, r25	; 0x02
    1470:	22 c0       	rjmp	.+68     	; 0x14b6 <KEYPAD_4x4_adjustSwitchNumber+0x13c>

	case 6: return 5;
    1472:	25 e0       	ldi	r18, 0x05	; 5
    1474:	2a 83       	std	Y+2, r18	; 0x02
    1476:	1f c0       	rjmp	.+62     	; 0x14b6 <KEYPAD_4x4_adjustSwitchNumber+0x13c>

	case 7: return 6;
    1478:	36 e0       	ldi	r19, 0x06	; 6
    147a:	3a 83       	std	Y+2, r19	; 0x02
    147c:	1c c0       	rjmp	.+56     	; 0x14b6 <KEYPAD_4x4_adjustSwitchNumber+0x13c>

	case 8: return '*';		/* ASCII Code of '*' */
    147e:	8a e2       	ldi	r24, 0x2A	; 42
    1480:	8a 83       	std	Y+2, r24	; 0x02
    1482:	19 c0       	rjmp	.+50     	; 0x14b6 <KEYPAD_4x4_adjustSwitchNumber+0x13c>

	case 9: return 1;
    1484:	91 e0       	ldi	r25, 0x01	; 1
    1486:	9a 83       	std	Y+2, r25	; 0x02
    1488:	16 c0       	rjmp	.+44     	; 0x14b6 <KEYPAD_4x4_adjustSwitchNumber+0x13c>

	case 10: return 2;
    148a:	22 e0       	ldi	r18, 0x02	; 2
    148c:	2a 83       	std	Y+2, r18	; 0x02
    148e:	13 c0       	rjmp	.+38     	; 0x14b6 <KEYPAD_4x4_adjustSwitchNumber+0x13c>

	case 11: return 3;
    1490:	33 e0       	ldi	r19, 0x03	; 3
    1492:	3a 83       	std	Y+2, r19	; 0x02
    1494:	10 c0       	rjmp	.+32     	; 0x14b6 <KEYPAD_4x4_adjustSwitchNumber+0x13c>

	case 12: return '-';	/* ASCII Code of '-' */
    1496:	8d e2       	ldi	r24, 0x2D	; 45
    1498:	8a 83       	std	Y+2, r24	; 0x02
    149a:	0d c0       	rjmp	.+26     	; 0x14b6 <KEYPAD_4x4_adjustSwitchNumber+0x13c>

	case 13: return 13;  	/* ASCII Code of Enter */
    149c:	9d e0       	ldi	r25, 0x0D	; 13
    149e:	9a 83       	std	Y+2, r25	; 0x02
    14a0:	0a c0       	rjmp	.+20     	; 0x14b6 <KEYPAD_4x4_adjustSwitchNumber+0x13c>

	case 14: return 0;
    14a2:	1a 82       	std	Y+2, r1	; 0x02
    14a4:	08 c0       	rjmp	.+16     	; 0x14b6 <KEYPAD_4x4_adjustSwitchNumber+0x13c>

	case 15: return '='; 	/* ASCII Code of '=' */
    14a6:	2d e3       	ldi	r18, 0x3D	; 61
    14a8:	2a 83       	std	Y+2, r18	; 0x02
    14aa:	05 c0       	rjmp	.+10     	; 0x14b6 <KEYPAD_4x4_adjustSwitchNumber+0x13c>

	case 16: return '+'; 	/* ASCII Code of '+' */
    14ac:	3b e2       	ldi	r19, 0x2B	; 43
    14ae:	3a 83       	std	Y+2, r19	; 0x02
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <KEYPAD_4x4_adjustSwitchNumber+0x13c>

	default: return a_keyNumber;
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	8a 83       	std	Y+2, r24	; 0x02
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <LCD_sendCommand>:
 * 		[IN] unsigned char a_command
 * 					: Command to send to LCD
 *
 * [Returns]		: N/A
 *******************************************************************************/
void LCD_sendCommand(uint8 a_command){
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	e9 97       	sbiw	r28, 0x39	; 57
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	de bf       	out	0x3e, r29	; 62
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	cd bf       	out	0x3d, r28	; 61
    14da:	89 af       	std	Y+57, r24	; 0x39

	CLEAR_BIT(LCD_CTRL_PORT, RS); 	/* Select command register */
    14dc:	a2 e3       	ldi	r26, 0x32	; 50
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e2 e3       	ldi	r30, 0x32	; 50
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	8b 7f       	andi	r24, 0xFB	; 251
    14e8:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, RW);	/* Select Write mode */
    14ea:	a2 e3       	ldi	r26, 0x32	; 50
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e2 e3       	ldi	r30, 0x32	; 50
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	87 7f       	andi	r24, 0xF7	; 247
    14f6:	8c 93       	st	X, r24
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	a0 e8       	ldi	r26, 0x80	; 128
    14fe:	bf e3       	ldi	r27, 0x3F	; 63
    1500:	8d ab       	std	Y+53, r24	; 0x35
    1502:	9e ab       	std	Y+54, r25	; 0x36
    1504:	af ab       	std	Y+55, r26	; 0x37
    1506:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1508:	6d a9       	ldd	r22, Y+53	; 0x35
    150a:	7e a9       	ldd	r23, Y+54	; 0x36
    150c:	8f a9       	ldd	r24, Y+55	; 0x37
    150e:	98 ad       	ldd	r25, Y+56	; 0x38
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	4a ef       	ldi	r20, 0xFA	; 250
    1516:	54 e4       	ldi	r21, 0x44	; 68
    1518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	89 ab       	std	Y+49, r24	; 0x31
    1522:	9a ab       	std	Y+50, r25	; 0x32
    1524:	ab ab       	std	Y+51, r26	; 0x33
    1526:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1528:	69 a9       	ldd	r22, Y+49	; 0x31
    152a:	7a a9       	ldd	r23, Y+50	; 0x32
    152c:	8b a9       	ldd	r24, Y+51	; 0x33
    152e:	9c a9       	ldd	r25, Y+52	; 0x34
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e8       	ldi	r20, 0x80	; 128
    1536:	5f e3       	ldi	r21, 0x3F	; 63
    1538:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    153c:	88 23       	and	r24, r24
    153e:	2c f4       	brge	.+10     	; 0x154a <LCD_sendCommand+0x84>
		__ticks = 1;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	98 ab       	std	Y+48, r25	; 0x30
    1546:	8f a7       	std	Y+47, r24	; 0x2f
    1548:	3f c0       	rjmp	.+126    	; 0x15c8 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    154a:	69 a9       	ldd	r22, Y+49	; 0x31
    154c:	7a a9       	ldd	r23, Y+50	; 0x32
    154e:	8b a9       	ldd	r24, Y+51	; 0x33
    1550:	9c a9       	ldd	r25, Y+52	; 0x34
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	3f ef       	ldi	r19, 0xFF	; 255
    1556:	4f e7       	ldi	r20, 0x7F	; 127
    1558:	57 e4       	ldi	r21, 0x47	; 71
    155a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    155e:	18 16       	cp	r1, r24
    1560:	4c f5       	brge	.+82     	; 0x15b4 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1562:	6d a9       	ldd	r22, Y+53	; 0x35
    1564:	7e a9       	ldd	r23, Y+54	; 0x36
    1566:	8f a9       	ldd	r24, Y+55	; 0x37
    1568:	98 ad       	ldd	r25, Y+56	; 0x38
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	40 e2       	ldi	r20, 0x20	; 32
    1570:	51 e4       	ldi	r21, 0x41	; 65
    1572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	bc 01       	movw	r22, r24
    157c:	cd 01       	movw	r24, r26
    157e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	98 ab       	std	Y+48, r25	; 0x30
    1588:	8f a7       	std	Y+47, r24	; 0x2f
    158a:	0f c0       	rjmp	.+30     	; 0x15aa <LCD_sendCommand+0xe4>
    158c:	88 ec       	ldi	r24, 0xC8	; 200
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	9e a7       	std	Y+46, r25	; 0x2e
    1592:	8d a7       	std	Y+45, r24	; 0x2d
    1594:	8d a5       	ldd	r24, Y+45	; 0x2d
    1596:	9e a5       	ldd	r25, Y+46	; 0x2e
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	f1 f7       	brne	.-4      	; 0x1598 <LCD_sendCommand+0xd2>
    159c:	9e a7       	std	Y+46, r25	; 0x2e
    159e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    15a2:	98 a9       	ldd	r25, Y+48	; 0x30
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	98 ab       	std	Y+48, r25	; 0x30
    15a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    15ac:	98 a9       	ldd	r25, Y+48	; 0x30
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	69 f7       	brne	.-38     	; 0x158c <LCD_sendCommand+0xc6>
    15b2:	14 c0       	rjmp	.+40     	; 0x15dc <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b4:	69 a9       	ldd	r22, Y+49	; 0x31
    15b6:	7a a9       	ldd	r23, Y+50	; 0x32
    15b8:	8b a9       	ldd	r24, Y+51	; 0x33
    15ba:	9c a9       	ldd	r25, Y+52	; 0x34
    15bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	98 ab       	std	Y+48, r25	; 0x30
    15c6:	8f a7       	std	Y+47, r24	; 0x2f
    15c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    15ca:	98 a9       	ldd	r25, Y+48	; 0x30
    15cc:	9c a7       	std	Y+44, r25	; 0x2c
    15ce:	8b a7       	std	Y+43, r24	; 0x2b
    15d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    15d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	f1 f7       	brne	.-4      	; 0x15d4 <LCD_sendCommand+0x10e>
    15d8:	9c a7       	std	Y+44, r25	; 0x2c
    15da:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);					/* 50ns Address set-up time */
	SET_BIT(LCD_CTRL_PORT, E);		/* Enable LCD */
    15dc:	a2 e3       	ldi	r26, 0x32	; 50
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e2 e3       	ldi	r30, 0x32	; 50
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	80 61       	ori	r24, 0x10	; 16
    15e8:	8c 93       	st	X, r24
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	a0 e8       	ldi	r26, 0x80	; 128
    15f0:	bf e3       	ldi	r27, 0x3F	; 63
    15f2:	8f a3       	std	Y+39, r24	; 0x27
    15f4:	98 a7       	std	Y+40, r25	; 0x28
    15f6:	a9 a7       	std	Y+41, r26	; 0x29
    15f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fa:	6f a1       	ldd	r22, Y+39	; 0x27
    15fc:	78 a5       	ldd	r23, Y+40	; 0x28
    15fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1600:	9a a5       	ldd	r25, Y+42	; 0x2a
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	4a ef       	ldi	r20, 0xFA	; 250
    1608:	54 e4       	ldi	r21, 0x44	; 68
    160a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	8b a3       	std	Y+35, r24	; 0x23
    1614:	9c a3       	std	Y+36, r25	; 0x24
    1616:	ad a3       	std	Y+37, r26	; 0x25
    1618:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    161a:	6b a1       	ldd	r22, Y+35	; 0x23
    161c:	7c a1       	ldd	r23, Y+36	; 0x24
    161e:	8d a1       	ldd	r24, Y+37	; 0x25
    1620:	9e a1       	ldd	r25, Y+38	; 0x26
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e8       	ldi	r20, 0x80	; 128
    1628:	5f e3       	ldi	r21, 0x3F	; 63
    162a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    162e:	88 23       	and	r24, r24
    1630:	2c f4       	brge	.+10     	; 0x163c <LCD_sendCommand+0x176>
		__ticks = 1;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	9a a3       	std	Y+34, r25	; 0x22
    1638:	89 a3       	std	Y+33, r24	; 0x21
    163a:	3f c0       	rjmp	.+126    	; 0x16ba <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    163c:	6b a1       	ldd	r22, Y+35	; 0x23
    163e:	7c a1       	ldd	r23, Y+36	; 0x24
    1640:	8d a1       	ldd	r24, Y+37	; 0x25
    1642:	9e a1       	ldd	r25, Y+38	; 0x26
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	3f ef       	ldi	r19, 0xFF	; 255
    1648:	4f e7       	ldi	r20, 0x7F	; 127
    164a:	57 e4       	ldi	r21, 0x47	; 71
    164c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1650:	18 16       	cp	r1, r24
    1652:	4c f5       	brge	.+82     	; 0x16a6 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1654:	6f a1       	ldd	r22, Y+39	; 0x27
    1656:	78 a5       	ldd	r23, Y+40	; 0x28
    1658:	89 a5       	ldd	r24, Y+41	; 0x29
    165a:	9a a5       	ldd	r25, Y+42	; 0x2a
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e2       	ldi	r20, 0x20	; 32
    1662:	51 e4       	ldi	r21, 0x41	; 65
    1664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	bc 01       	movw	r22, r24
    166e:	cd 01       	movw	r24, r26
    1670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	9a a3       	std	Y+34, r25	; 0x22
    167a:	89 a3       	std	Y+33, r24	; 0x21
    167c:	0f c0       	rjmp	.+30     	; 0x169c <LCD_sendCommand+0x1d6>
    167e:	88 ec       	ldi	r24, 0xC8	; 200
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	98 a3       	std	Y+32, r25	; 0x20
    1684:	8f 8f       	std	Y+31, r24	; 0x1f
    1686:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1688:	98 a1       	ldd	r25, Y+32	; 0x20
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	f1 f7       	brne	.-4      	; 0x168a <LCD_sendCommand+0x1c4>
    168e:	98 a3       	std	Y+32, r25	; 0x20
    1690:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1692:	89 a1       	ldd	r24, Y+33	; 0x21
    1694:	9a a1       	ldd	r25, Y+34	; 0x22
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	9a a3       	std	Y+34, r25	; 0x22
    169a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169c:	89 a1       	ldd	r24, Y+33	; 0x21
    169e:	9a a1       	ldd	r25, Y+34	; 0x22
    16a0:	00 97       	sbiw	r24, 0x00	; 0
    16a2:	69 f7       	brne	.-38     	; 0x167e <LCD_sendCommand+0x1b8>
    16a4:	14 c0       	rjmp	.+40     	; 0x16ce <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a6:	6b a1       	ldd	r22, Y+35	; 0x23
    16a8:	7c a1       	ldd	r23, Y+36	; 0x24
    16aa:	8d a1       	ldd	r24, Y+37	; 0x25
    16ac:	9e a1       	ldd	r25, Y+38	; 0x26
    16ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	9a a3       	std	Y+34, r25	; 0x22
    16b8:	89 a3       	std	Y+33, r24	; 0x21
    16ba:	89 a1       	ldd	r24, Y+33	; 0x21
    16bc:	9a a1       	ldd	r25, Y+34	; 0x22
    16be:	9e 8f       	std	Y+30, r25	; 0x1e
    16c0:	8d 8f       	std	Y+29, r24	; 0x1d
    16c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	f1 f7       	brne	.-4      	; 0x16c6 <LCD_sendCommand+0x200>
    16ca:	9e 8f       	std	Y+30, r25	; 0x1e
    16cc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);					/* 190ns delay before data set-up (Tpw - Tdws) */

#if DATA_BITS_MODE == 8				/* For 8 bits mode on LCD */
	LCD_DATA_PORT = a_command;		/* Put required command on Data port */
    16ce:	e5 e3       	ldi	r30, 0x35	; 53
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	89 ad       	ldd	r24, Y+57	; 0x39
    16d4:	80 83       	st	Z, r24
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	a0 e8       	ldi	r26, 0x80	; 128
    16dc:	bf e3       	ldi	r27, 0x3F	; 63
    16de:	89 8f       	std	Y+25, r24	; 0x19
    16e0:	9a 8f       	std	Y+26, r25	; 0x1a
    16e2:	ab 8f       	std	Y+27, r26	; 0x1b
    16e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e6:	69 8d       	ldd	r22, Y+25	; 0x19
    16e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	4a ef       	ldi	r20, 0xFA	; 250
    16f4:	54 e4       	ldi	r21, 0x44	; 68
    16f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	8d 8b       	std	Y+21, r24	; 0x15
    1700:	9e 8b       	std	Y+22, r25	; 0x16
    1702:	af 8b       	std	Y+23, r26	; 0x17
    1704:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1706:	6d 89       	ldd	r22, Y+21	; 0x15
    1708:	7e 89       	ldd	r23, Y+22	; 0x16
    170a:	8f 89       	ldd	r24, Y+23	; 0x17
    170c:	98 8d       	ldd	r25, Y+24	; 0x18
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e8       	ldi	r20, 0x80	; 128
    1714:	5f e3       	ldi	r21, 0x3F	; 63
    1716:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    171a:	88 23       	and	r24, r24
    171c:	2c f4       	brge	.+10     	; 0x1728 <LCD_sendCommand+0x262>
		__ticks = 1;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	9c 8b       	std	Y+20, r25	; 0x14
    1724:	8b 8b       	std	Y+19, r24	; 0x13
    1726:	3f c0       	rjmp	.+126    	; 0x17a6 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1728:	6d 89       	ldd	r22, Y+21	; 0x15
    172a:	7e 89       	ldd	r23, Y+22	; 0x16
    172c:	8f 89       	ldd	r24, Y+23	; 0x17
    172e:	98 8d       	ldd	r25, Y+24	; 0x18
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	3f ef       	ldi	r19, 0xFF	; 255
    1734:	4f e7       	ldi	r20, 0x7F	; 127
    1736:	57 e4       	ldi	r21, 0x47	; 71
    1738:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    173c:	18 16       	cp	r1, r24
    173e:	4c f5       	brge	.+82     	; 0x1792 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1740:	69 8d       	ldd	r22, Y+25	; 0x19
    1742:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1744:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1746:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 e2       	ldi	r20, 0x20	; 32
    174e:	51 e4       	ldi	r21, 0x41	; 65
    1750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	9c 8b       	std	Y+20, r25	; 0x14
    1766:	8b 8b       	std	Y+19, r24	; 0x13
    1768:	0f c0       	rjmp	.+30     	; 0x1788 <LCD_sendCommand+0x2c2>
    176a:	88 ec       	ldi	r24, 0xC8	; 200
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	9a 8b       	std	Y+18, r25	; 0x12
    1770:	89 8b       	std	Y+17, r24	; 0x11
    1772:	89 89       	ldd	r24, Y+17	; 0x11
    1774:	9a 89       	ldd	r25, Y+18	; 0x12
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	f1 f7       	brne	.-4      	; 0x1776 <LCD_sendCommand+0x2b0>
    177a:	9a 8b       	std	Y+18, r25	; 0x12
    177c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177e:	8b 89       	ldd	r24, Y+19	; 0x13
    1780:	9c 89       	ldd	r25, Y+20	; 0x14
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	9c 8b       	std	Y+20, r25	; 0x14
    1786:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1788:	8b 89       	ldd	r24, Y+19	; 0x13
    178a:	9c 89       	ldd	r25, Y+20	; 0x14
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	69 f7       	brne	.-38     	; 0x176a <LCD_sendCommand+0x2a4>
    1790:	14 c0       	rjmp	.+40     	; 0x17ba <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1792:	6d 89       	ldd	r22, Y+21	; 0x15
    1794:	7e 89       	ldd	r23, Y+22	; 0x16
    1796:	8f 89       	ldd	r24, Y+23	; 0x17
    1798:	98 8d       	ldd	r25, Y+24	; 0x18
    179a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	9c 8b       	std	Y+20, r25	; 0x14
    17a4:	8b 8b       	std	Y+19, r24	; 0x13
    17a6:	8b 89       	ldd	r24, Y+19	; 0x13
    17a8:	9c 89       	ldd	r25, Y+20	; 0x14
    17aa:	98 8b       	std	Y+16, r25	; 0x10
    17ac:	8f 87       	std	Y+15, r24	; 0x0f
    17ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    17b0:	98 89       	ldd	r25, Y+16	; 0x10
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <LCD_sendCommand+0x2ec>
    17b6:	98 8b       	std	Y+16, r25	; 0x10
    17b8:	8f 87       	std	Y+15, r24	; 0x0f
#endif

#endif

	_delay_ms(1);					/* 100ns delay for data set-up */
	CLEAR_BIT(LCD_CTRL_PORT, E);	/* Disable LCD */
    17ba:	a2 e3       	ldi	r26, 0x32	; 50
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e2 e3       	ldi	r30, 0x32	; 50
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	8f 7e       	andi	r24, 0xEF	; 239
    17c6:	8c 93       	st	X, r24
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	a0 e8       	ldi	r26, 0x80	; 128
    17ce:	bf e3       	ldi	r27, 0x3F	; 63
    17d0:	8b 87       	std	Y+11, r24	; 0x0b
    17d2:	9c 87       	std	Y+12, r25	; 0x0c
    17d4:	ad 87       	std	Y+13, r26	; 0x0d
    17d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17da:	7c 85       	ldd	r23, Y+12	; 0x0c
    17dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17de:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	4a ef       	ldi	r20, 0xFA	; 250
    17e6:	54 e4       	ldi	r21, 0x44	; 68
    17e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	8f 83       	std	Y+7, r24	; 0x07
    17f2:	98 87       	std	Y+8, r25	; 0x08
    17f4:	a9 87       	std	Y+9, r26	; 0x09
    17f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17f8:	6f 81       	ldd	r22, Y+7	; 0x07
    17fa:	78 85       	ldd	r23, Y+8	; 0x08
    17fc:	89 85       	ldd	r24, Y+9	; 0x09
    17fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e8       	ldi	r20, 0x80	; 128
    1806:	5f e3       	ldi	r21, 0x3F	; 63
    1808:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    180c:	88 23       	and	r24, r24
    180e:	2c f4       	brge	.+10     	; 0x181a <LCD_sendCommand+0x354>
		__ticks = 1;
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	9e 83       	std	Y+6, r25	; 0x06
    1816:	8d 83       	std	Y+5, r24	; 0x05
    1818:	3f c0       	rjmp	.+126    	; 0x1898 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    181a:	6f 81       	ldd	r22, Y+7	; 0x07
    181c:	78 85       	ldd	r23, Y+8	; 0x08
    181e:	89 85       	ldd	r24, Y+9	; 0x09
    1820:	9a 85       	ldd	r25, Y+10	; 0x0a
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	3f ef       	ldi	r19, 0xFF	; 255
    1826:	4f e7       	ldi	r20, 0x7F	; 127
    1828:	57 e4       	ldi	r21, 0x47	; 71
    182a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    182e:	18 16       	cp	r1, r24
    1830:	4c f5       	brge	.+82     	; 0x1884 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1832:	6b 85       	ldd	r22, Y+11	; 0x0b
    1834:	7c 85       	ldd	r23, Y+12	; 0x0c
    1836:	8d 85       	ldd	r24, Y+13	; 0x0d
    1838:	9e 85       	ldd	r25, Y+14	; 0x0e
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e2       	ldi	r20, 0x20	; 32
    1840:	51 e4       	ldi	r21, 0x41	; 65
    1842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	bc 01       	movw	r22, r24
    184c:	cd 01       	movw	r24, r26
    184e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	9e 83       	std	Y+6, r25	; 0x06
    1858:	8d 83       	std	Y+5, r24	; 0x05
    185a:	0f c0       	rjmp	.+30     	; 0x187a <LCD_sendCommand+0x3b4>
    185c:	88 ec       	ldi	r24, 0xC8	; 200
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	9c 83       	std	Y+4, r25	; 0x04
    1862:	8b 83       	std	Y+3, r24	; 0x03
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	9c 81       	ldd	r25, Y+4	; 0x04
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	f1 f7       	brne	.-4      	; 0x1868 <LCD_sendCommand+0x3a2>
    186c:	9c 83       	std	Y+4, r25	; 0x04
    186e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1870:	8d 81       	ldd	r24, Y+5	; 0x05
    1872:	9e 81       	ldd	r25, Y+6	; 0x06
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	9e 83       	std	Y+6, r25	; 0x06
    1878:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187a:	8d 81       	ldd	r24, Y+5	; 0x05
    187c:	9e 81       	ldd	r25, Y+6	; 0x06
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	69 f7       	brne	.-38     	; 0x185c <LCD_sendCommand+0x396>
    1882:	14 c0       	rjmp	.+40     	; 0x18ac <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1884:	6f 81       	ldd	r22, Y+7	; 0x07
    1886:	78 85       	ldd	r23, Y+8	; 0x08
    1888:	89 85       	ldd	r24, Y+9	; 0x09
    188a:	9a 85       	ldd	r25, Y+10	; 0x0a
    188c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	9e 83       	std	Y+6, r25	; 0x06
    1896:	8d 83       	std	Y+5, r24	; 0x05
    1898:	8d 81       	ldd	r24, Y+5	; 0x05
    189a:	9e 81       	ldd	r25, Y+6	; 0x06
    189c:	9a 83       	std	Y+2, r25	; 0x02
    189e:	89 83       	std	Y+1, r24	; 0x01
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	9a 81       	ldd	r25, Y+2	; 0x02
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	f1 f7       	brne	.-4      	; 0x18a4 <LCD_sendCommand+0x3de>
    18a8:	9a 83       	std	Y+2, r25	; 0x02
    18aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);					/* 13ns delay for data hold time */
}
    18ac:	e9 96       	adiw	r28, 0x39	; 57
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	f8 94       	cli
    18b2:	de bf       	out	0x3e, r29	; 62
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	cd bf       	out	0x3d, r28	; 61
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <LCD_init>:
 * [Function Name]	: LCD_init
 * [Description]	: Initialize LCD
 * [Args]			: N/A
 * [Returns]		: N/A
 *******************************************************************************/
void LCD_init(void){
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62

	LCD_CTRL_PORT_DIR = (HIGH << RS) | (HIGH << RW) | (HIGH << E);	/* Set Register select, Read/Write, and enable pins as o/p pins */
    18c6:	e1 e3       	ldi	r30, 0x31	; 49
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	8c e1       	ldi	r24, 0x1C	; 28
    18cc:	80 83       	st	Z, r24

#if DATA_BITS_MODE == 8										/* For 8 bits mode on LCD */
	LCD_DATA_PORT_DIR = 0xFF;								/* Set Data pins as o/p pins */
    18ce:	e4 e3       	ldi	r30, 0x34	; 52
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	8f ef       	ldi	r24, 0xFF	; 255
    18d4:	80 83       	st	Z, r24
	LCD_sendCommand(LCD_COMMAND_EIGHT_BIT_TWO_LINE_LCD);	/* Set-up LCD as 8 bit data 2 line LCD */
    18d6:	88 e3       	ldi	r24, 0x38	; 56
    18d8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <LCD_sendCommand>
	LCD_DATA_PORT_DIR |= 0x0F;								/* Set-up data port pins 0-3 as o/p pins */
#endif
	LCD_sendCommand(LCD_LCD_COMMAND_FOUR_BIT_TWO_LINE_LCD);	/* Set-up LCD as 4 bit data 2 line LCD */
#endif

	LCD_sendCommand(LCD_COMMAND_DISPLAY_ON_CURSOR_OFF);		/* Activate display and deactivate cursor */
    18dc:	8c e0       	ldi	r24, 0x0C	; 12
    18de:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <LCD_sendCommand>
	LCD_sendCommand(LCD_COMMAND_CLEAR_DISPLAY);				/* Clear LCD to start working */
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <LCD_sendCommand>
}
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	08 95       	ret

000018ee <LCD_displayCharacter>:
 * 		[IN] unsigned char a_data
 * 					: Character to display on the screen
 *
 * [Returns]		: N/A
 *******************************************************************************/
void LCD_displayCharacter(uint8 a_data){
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	e9 97       	sbiw	r28, 0x39	; 57
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	f8 94       	cli
    18fc:	de bf       	out	0x3e, r29	; 62
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	cd bf       	out	0x3d, r28	; 61
    1902:	89 af       	std	Y+57, r24	; 0x39

	SET_BIT(LCD_CTRL_PORT, RS); 	/* Select data register */
    1904:	a2 e3       	ldi	r26, 0x32	; 50
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e2 e3       	ldi	r30, 0x32	; 50
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	84 60       	ori	r24, 0x04	; 4
    1910:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, RW);	/* Select Write mode */
    1912:	a2 e3       	ldi	r26, 0x32	; 50
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e2 e3       	ldi	r30, 0x32	; 50
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	87 7f       	andi	r24, 0xF7	; 247
    191e:	8c 93       	st	X, r24
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	a0 e8       	ldi	r26, 0x80	; 128
    1926:	bf e3       	ldi	r27, 0x3F	; 63
    1928:	8d ab       	std	Y+53, r24	; 0x35
    192a:	9e ab       	std	Y+54, r25	; 0x36
    192c:	af ab       	std	Y+55, r26	; 0x37
    192e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1930:	6d a9       	ldd	r22, Y+53	; 0x35
    1932:	7e a9       	ldd	r23, Y+54	; 0x36
    1934:	8f a9       	ldd	r24, Y+55	; 0x37
    1936:	98 ad       	ldd	r25, Y+56	; 0x38
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	4a ef       	ldi	r20, 0xFA	; 250
    193e:	54 e4       	ldi	r21, 0x44	; 68
    1940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	89 ab       	std	Y+49, r24	; 0x31
    194a:	9a ab       	std	Y+50, r25	; 0x32
    194c:	ab ab       	std	Y+51, r26	; 0x33
    194e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1950:	69 a9       	ldd	r22, Y+49	; 0x31
    1952:	7a a9       	ldd	r23, Y+50	; 0x32
    1954:	8b a9       	ldd	r24, Y+51	; 0x33
    1956:	9c a9       	ldd	r25, Y+52	; 0x34
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e8       	ldi	r20, 0x80	; 128
    195e:	5f e3       	ldi	r21, 0x3F	; 63
    1960:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1964:	88 23       	and	r24, r24
    1966:	2c f4       	brge	.+10     	; 0x1972 <LCD_displayCharacter+0x84>
		__ticks = 1;
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	98 ab       	std	Y+48, r25	; 0x30
    196e:	8f a7       	std	Y+47, r24	; 0x2f
    1970:	3f c0       	rjmp	.+126    	; 0x19f0 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1972:	69 a9       	ldd	r22, Y+49	; 0x31
    1974:	7a a9       	ldd	r23, Y+50	; 0x32
    1976:	8b a9       	ldd	r24, Y+51	; 0x33
    1978:	9c a9       	ldd	r25, Y+52	; 0x34
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	3f ef       	ldi	r19, 0xFF	; 255
    197e:	4f e7       	ldi	r20, 0x7F	; 127
    1980:	57 e4       	ldi	r21, 0x47	; 71
    1982:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1986:	18 16       	cp	r1, r24
    1988:	4c f5       	brge	.+82     	; 0x19dc <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198a:	6d a9       	ldd	r22, Y+53	; 0x35
    198c:	7e a9       	ldd	r23, Y+54	; 0x36
    198e:	8f a9       	ldd	r24, Y+55	; 0x37
    1990:	98 ad       	ldd	r25, Y+56	; 0x38
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	40 e2       	ldi	r20, 0x20	; 32
    1998:	51 e4       	ldi	r21, 0x41	; 65
    199a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	bc 01       	movw	r22, r24
    19a4:	cd 01       	movw	r24, r26
    19a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	98 ab       	std	Y+48, r25	; 0x30
    19b0:	8f a7       	std	Y+47, r24	; 0x2f
    19b2:	0f c0       	rjmp	.+30     	; 0x19d2 <LCD_displayCharacter+0xe4>
    19b4:	88 ec       	ldi	r24, 0xC8	; 200
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	9e a7       	std	Y+46, r25	; 0x2e
    19ba:	8d a7       	std	Y+45, r24	; 0x2d
    19bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    19be:	9e a5       	ldd	r25, Y+46	; 0x2e
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	f1 f7       	brne	.-4      	; 0x19c0 <LCD_displayCharacter+0xd2>
    19c4:	9e a7       	std	Y+46, r25	; 0x2e
    19c6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    19ca:	98 a9       	ldd	r25, Y+48	; 0x30
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	98 ab       	std	Y+48, r25	; 0x30
    19d0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    19d4:	98 a9       	ldd	r25, Y+48	; 0x30
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	69 f7       	brne	.-38     	; 0x19b4 <LCD_displayCharacter+0xc6>
    19da:	14 c0       	rjmp	.+40     	; 0x1a04 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19dc:	69 a9       	ldd	r22, Y+49	; 0x31
    19de:	7a a9       	ldd	r23, Y+50	; 0x32
    19e0:	8b a9       	ldd	r24, Y+51	; 0x33
    19e2:	9c a9       	ldd	r25, Y+52	; 0x34
    19e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	98 ab       	std	Y+48, r25	; 0x30
    19ee:	8f a7       	std	Y+47, r24	; 0x2f
    19f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    19f2:	98 a9       	ldd	r25, Y+48	; 0x30
    19f4:	9c a7       	std	Y+44, r25	; 0x2c
    19f6:	8b a7       	std	Y+43, r24	; 0x2b
    19f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    19fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	f1 f7       	brne	.-4      	; 0x19fc <LCD_displayCharacter+0x10e>
    1a00:	9c a7       	std	Y+44, r25	; 0x2c
    1a02:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);					/* 50ns Address set-up time */
	SET_BIT(LCD_CTRL_PORT, E);		/* Enable LCD */
    1a04:	a2 e3       	ldi	r26, 0x32	; 50
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e2 e3       	ldi	r30, 0x32	; 50
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	80 61       	ori	r24, 0x10	; 16
    1a10:	8c 93       	st	X, r24
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	a0 e8       	ldi	r26, 0x80	; 128
    1a18:	bf e3       	ldi	r27, 0x3F	; 63
    1a1a:	8f a3       	std	Y+39, r24	; 0x27
    1a1c:	98 a7       	std	Y+40, r25	; 0x28
    1a1e:	a9 a7       	std	Y+41, r26	; 0x29
    1a20:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a22:	6f a1       	ldd	r22, Y+39	; 0x27
    1a24:	78 a5       	ldd	r23, Y+40	; 0x28
    1a26:	89 a5       	ldd	r24, Y+41	; 0x29
    1a28:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	4a ef       	ldi	r20, 0xFA	; 250
    1a30:	54 e4       	ldi	r21, 0x44	; 68
    1a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	8b a3       	std	Y+35, r24	; 0x23
    1a3c:	9c a3       	std	Y+36, r25	; 0x24
    1a3e:	ad a3       	std	Y+37, r26	; 0x25
    1a40:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a42:	6b a1       	ldd	r22, Y+35	; 0x23
    1a44:	7c a1       	ldd	r23, Y+36	; 0x24
    1a46:	8d a1       	ldd	r24, Y+37	; 0x25
    1a48:	9e a1       	ldd	r25, Y+38	; 0x26
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e8       	ldi	r20, 0x80	; 128
    1a50:	5f e3       	ldi	r21, 0x3F	; 63
    1a52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a56:	88 23       	and	r24, r24
    1a58:	2c f4       	brge	.+10     	; 0x1a64 <LCD_displayCharacter+0x176>
		__ticks = 1;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	9a a3       	std	Y+34, r25	; 0x22
    1a60:	89 a3       	std	Y+33, r24	; 0x21
    1a62:	3f c0       	rjmp	.+126    	; 0x1ae2 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1a64:	6b a1       	ldd	r22, Y+35	; 0x23
    1a66:	7c a1       	ldd	r23, Y+36	; 0x24
    1a68:	8d a1       	ldd	r24, Y+37	; 0x25
    1a6a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	3f ef       	ldi	r19, 0xFF	; 255
    1a70:	4f e7       	ldi	r20, 0x7F	; 127
    1a72:	57 e4       	ldi	r21, 0x47	; 71
    1a74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a78:	18 16       	cp	r1, r24
    1a7a:	4c f5       	brge	.+82     	; 0x1ace <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7c:	6f a1       	ldd	r22, Y+39	; 0x27
    1a7e:	78 a5       	ldd	r23, Y+40	; 0x28
    1a80:	89 a5       	ldd	r24, Y+41	; 0x29
    1a82:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 e2       	ldi	r20, 0x20	; 32
    1a8a:	51 e4       	ldi	r21, 0x41	; 65
    1a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	bc 01       	movw	r22, r24
    1a96:	cd 01       	movw	r24, r26
    1a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	9a a3       	std	Y+34, r25	; 0x22
    1aa2:	89 a3       	std	Y+33, r24	; 0x21
    1aa4:	0f c0       	rjmp	.+30     	; 0x1ac4 <LCD_displayCharacter+0x1d6>
    1aa6:	88 ec       	ldi	r24, 0xC8	; 200
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	98 a3       	std	Y+32, r25	; 0x20
    1aac:	8f 8f       	std	Y+31, r24	; 0x1f
    1aae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ab0:	98 a1       	ldd	r25, Y+32	; 0x20
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	f1 f7       	brne	.-4      	; 0x1ab2 <LCD_displayCharacter+0x1c4>
    1ab6:	98 a3       	std	Y+32, r25	; 0x20
    1ab8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aba:	89 a1       	ldd	r24, Y+33	; 0x21
    1abc:	9a a1       	ldd	r25, Y+34	; 0x22
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	9a a3       	std	Y+34, r25	; 0x22
    1ac2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	69 f7       	brne	.-38     	; 0x1aa6 <LCD_displayCharacter+0x1b8>
    1acc:	14 c0       	rjmp	.+40     	; 0x1af6 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ace:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	9a a3       	std	Y+34, r25	; 0x22
    1ae0:	89 a3       	std	Y+33, r24	; 0x21
    1ae2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ae8:	8d 8f       	std	Y+29, r24	; 0x1d
    1aea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <LCD_displayCharacter+0x200>
    1af2:	9e 8f       	std	Y+30, r25	; 0x1e
    1af4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);					/* 190ns delay before data set-up (Tpw - Tdws) */

#if DATA_BITS_MODE == 8				/* For 8 bits mode on LCD */
	LCD_DATA_PORT = a_data;			/* Put required command on Data port */
    1af6:	e5 e3       	ldi	r30, 0x35	; 53
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	89 ad       	ldd	r24, Y+57	; 0x39
    1afc:	80 83       	st	Z, r24
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	a0 e8       	ldi	r26, 0x80	; 128
    1b04:	bf e3       	ldi	r27, 0x3F	; 63
    1b06:	89 8f       	std	Y+25, r24	; 0x19
    1b08:	9a 8f       	std	Y+26, r25	; 0x1a
    1b0a:	ab 8f       	std	Y+27, r26	; 0x1b
    1b0c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	4a ef       	ldi	r20, 0xFA	; 250
    1b1c:	54 e4       	ldi	r21, 0x44	; 68
    1b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	8d 8b       	std	Y+21, r24	; 0x15
    1b28:	9e 8b       	std	Y+22, r25	; 0x16
    1b2a:	af 8b       	std	Y+23, r26	; 0x17
    1b2c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b30:	7e 89       	ldd	r23, Y+22	; 0x16
    1b32:	8f 89       	ldd	r24, Y+23	; 0x17
    1b34:	98 8d       	ldd	r25, Y+24	; 0x18
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e8       	ldi	r20, 0x80	; 128
    1b3c:	5f e3       	ldi	r21, 0x3F	; 63
    1b3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b42:	88 23       	and	r24, r24
    1b44:	2c f4       	brge	.+10     	; 0x1b50 <LCD_displayCharacter+0x262>
		__ticks = 1;
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	9c 8b       	std	Y+20, r25	; 0x14
    1b4c:	8b 8b       	std	Y+19, r24	; 0x13
    1b4e:	3f c0       	rjmp	.+126    	; 0x1bce <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1b50:	6d 89       	ldd	r22, Y+21	; 0x15
    1b52:	7e 89       	ldd	r23, Y+22	; 0x16
    1b54:	8f 89       	ldd	r24, Y+23	; 0x17
    1b56:	98 8d       	ldd	r25, Y+24	; 0x18
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	3f ef       	ldi	r19, 0xFF	; 255
    1b5c:	4f e7       	ldi	r20, 0x7F	; 127
    1b5e:	57 e4       	ldi	r21, 0x47	; 71
    1b60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b64:	18 16       	cp	r1, r24
    1b66:	4c f5       	brge	.+82     	; 0x1bba <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b68:	69 8d       	ldd	r22, Y+25	; 0x19
    1b6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	40 e2       	ldi	r20, 0x20	; 32
    1b76:	51 e4       	ldi	r21, 0x41	; 65
    1b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	bc 01       	movw	r22, r24
    1b82:	cd 01       	movw	r24, r26
    1b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	9c 8b       	std	Y+20, r25	; 0x14
    1b8e:	8b 8b       	std	Y+19, r24	; 0x13
    1b90:	0f c0       	rjmp	.+30     	; 0x1bb0 <LCD_displayCharacter+0x2c2>
    1b92:	88 ec       	ldi	r24, 0xC8	; 200
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	9a 8b       	std	Y+18, r25	; 0x12
    1b98:	89 8b       	std	Y+17, r24	; 0x11
    1b9a:	89 89       	ldd	r24, Y+17	; 0x11
    1b9c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <LCD_displayCharacter+0x2b0>
    1ba2:	9a 8b       	std	Y+18, r25	; 0x12
    1ba4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba8:	9c 89       	ldd	r25, Y+20	; 0x14
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	9c 8b       	std	Y+20, r25	; 0x14
    1bae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	69 f7       	brne	.-38     	; 0x1b92 <LCD_displayCharacter+0x2a4>
    1bb8:	14 c0       	rjmp	.+40     	; 0x1be2 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bba:	6d 89       	ldd	r22, Y+21	; 0x15
    1bbc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	9c 8b       	std	Y+20, r25	; 0x14
    1bcc:	8b 8b       	std	Y+19, r24	; 0x13
    1bce:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd2:	98 8b       	std	Y+16, r25	; 0x10
    1bd4:	8f 87       	std	Y+15, r24	; 0x0f
    1bd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd8:	98 89       	ldd	r25, Y+16	; 0x10
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <LCD_displayCharacter+0x2ec>
    1bde:	98 8b       	std	Y+16, r25	; 0x10
    1be0:	8f 87       	std	Y+15, r24	; 0x0f
#endif

#endif

	_delay_ms(1);					/* 100ns delay for data set-up */
	CLEAR_BIT(LCD_CTRL_PORT, E);	/* Disable LCD */
    1be2:	a2 e3       	ldi	r26, 0x32	; 50
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e2 e3       	ldi	r30, 0x32	; 50
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	8f 7e       	andi	r24, 0xEF	; 239
    1bee:	8c 93       	st	X, r24
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	a0 e8       	ldi	r26, 0x80	; 128
    1bf6:	bf e3       	ldi	r27, 0x3F	; 63
    1bf8:	8b 87       	std	Y+11, r24	; 0x0b
    1bfa:	9c 87       	std	Y+12, r25	; 0x0c
    1bfc:	ad 87       	std	Y+13, r26	; 0x0d
    1bfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	4a ef       	ldi	r20, 0xFA	; 250
    1c0e:	54 e4       	ldi	r21, 0x44	; 68
    1c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	8f 83       	std	Y+7, r24	; 0x07
    1c1a:	98 87       	std	Y+8, r25	; 0x08
    1c1c:	a9 87       	std	Y+9, r26	; 0x09
    1c1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c20:	6f 81       	ldd	r22, Y+7	; 0x07
    1c22:	78 85       	ldd	r23, Y+8	; 0x08
    1c24:	89 85       	ldd	r24, Y+9	; 0x09
    1c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e8       	ldi	r20, 0x80	; 128
    1c2e:	5f e3       	ldi	r21, 0x3F	; 63
    1c30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c34:	88 23       	and	r24, r24
    1c36:	2c f4       	brge	.+10     	; 0x1c42 <LCD_displayCharacter+0x354>
		__ticks = 1;
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9e 83       	std	Y+6, r25	; 0x06
    1c3e:	8d 83       	std	Y+5, r24	; 0x05
    1c40:	3f c0       	rjmp	.+126    	; 0x1cc0 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1c42:	6f 81       	ldd	r22, Y+7	; 0x07
    1c44:	78 85       	ldd	r23, Y+8	; 0x08
    1c46:	89 85       	ldd	r24, Y+9	; 0x09
    1c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	3f ef       	ldi	r19, 0xFF	; 255
    1c4e:	4f e7       	ldi	r20, 0x7F	; 127
    1c50:	57 e4       	ldi	r21, 0x47	; 71
    1c52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c56:	18 16       	cp	r1, r24
    1c58:	4c f5       	brge	.+82     	; 0x1cac <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e2       	ldi	r20, 0x20	; 32
    1c68:	51 e4       	ldi	r21, 0x41	; 65
    1c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	bc 01       	movw	r22, r24
    1c74:	cd 01       	movw	r24, r26
    1c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	9e 83       	std	Y+6, r25	; 0x06
    1c80:	8d 83       	std	Y+5, r24	; 0x05
    1c82:	0f c0       	rjmp	.+30     	; 0x1ca2 <LCD_displayCharacter+0x3b4>
    1c84:	88 ec       	ldi	r24, 0xC8	; 200
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	9c 83       	std	Y+4, r25	; 0x04
    1c8a:	8b 83       	std	Y+3, r24	; 0x03
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <LCD_displayCharacter+0x3a2>
    1c94:	9c 83       	std	Y+4, r25	; 0x04
    1c96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c98:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	69 f7       	brne	.-38     	; 0x1c84 <LCD_displayCharacter+0x396>
    1caa:	14 c0       	rjmp	.+40     	; 0x1cd4 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cac:	6f 81       	ldd	r22, Y+7	; 0x07
    1cae:	78 85       	ldd	r23, Y+8	; 0x08
    1cb0:	89 85       	ldd	r24, Y+9	; 0x09
    1cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	9e 83       	std	Y+6, r25	; 0x06
    1cbe:	8d 83       	std	Y+5, r24	; 0x05
    1cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc4:	9a 83       	std	Y+2, r25	; 0x02
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <LCD_displayCharacter+0x3de>
    1cd0:	9a 83       	std	Y+2, r25	; 0x02
    1cd2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);					/* 13ns delay for data hold time */
}
    1cd4:	e9 96       	adiw	r28, 0x39	; 57
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	f8 94       	cli
    1cda:	de bf       	out	0x3e, r29	; 62
    1cdc:	0f be       	out	0x3f, r0	; 63
    1cde:	cd bf       	out	0x3d, r28	; 61
    1ce0:	cf 91       	pop	r28
    1ce2:	df 91       	pop	r29
    1ce4:	08 95       	ret

00001ce6 <LCD_displayString>:
 * 		[IN] const unsigned char *a_string_Ptr
 * 					: String to display on the screen
 *
 * [Returns]		: N/A
 *******************************************************************************/
void LCD_displayString(const uint8 *a_string_Ptr){
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	28 97       	sbiw	r28, 0x08	; 8
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
    1cfa:	9e 83       	std	Y+6, r25	; 0x06
    1cfc:	8d 83       	std	Y+5, r24	; 0x05
	uint8 firstSpace = NUMBER_OF_LCD_COLS+1;				/* Variable to save position of first space character */
    1cfe:	81 e1       	ldi	r24, 0x11	; 17
    1d00:	8c 83       	std	Y+4, r24	; 0x04
	if(strlen(a_string_Ptr) > NUMBER_OF_LCD_COLS){			/* Check if screen will display more than 1 row of data */
    1d02:	8d 81       	ldd	r24, Y+5	; 0x05
    1d04:	9e 81       	ldd	r25, Y+6	; 0x06
    1d06:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <strlen>
    1d0a:	81 31       	cpi	r24, 0x11	; 17
    1d0c:	91 05       	cpc	r25, r1
    1d0e:	00 f1       	brcs	.+64     	; 0x1d50 <LCD_displayString+0x6a>
		for (int i = NUMBER_OF_LCD_COLS-1; i >= 0; i--){	/* Pass through the string to find last space before new line */
    1d10:	8f e0       	ldi	r24, 0x0F	; 15
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	9a 83       	std	Y+2, r25	; 0x02
    1d16:	89 83       	std	Y+1, r24	; 0x01
    1d18:	17 c0       	rjmp	.+46     	; 0x1d48 <LCD_displayString+0x62>
			if(isspace(a_string_Ptr[i])){					/* Check if the character is a space */
    1d1a:	29 81       	ldd	r18, Y+1	; 0x01
    1d1c:	3a 81       	ldd	r19, Y+2	; 0x02
    1d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d20:	9e 81       	ldd	r25, Y+6	; 0x06
    1d22:	fc 01       	movw	r30, r24
    1d24:	e2 0f       	add	r30, r18
    1d26:	f3 1f       	adc	r31, r19
    1d28:	80 81       	ld	r24, Z
    1d2a:	88 2f       	mov	r24, r24
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	0e 94 c9 11 	call	0x2392	; 0x2392 <isspace>
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	21 f0       	breq	.+8      	; 0x1d3e <LCD_displayString+0x58>
				firstSpace = i+1;							/* Save location of character after space */
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	8f 5f       	subi	r24, 0xFF	; 255
    1d3a:	8c 83       	std	Y+4, r24	; 0x04
    1d3c:	09 c0       	rjmp	.+18     	; 0x1d50 <LCD_displayString+0x6a>
 * [Returns]		: N/A
 *******************************************************************************/
void LCD_displayString(const uint8 *a_string_Ptr){
	uint8 firstSpace = NUMBER_OF_LCD_COLS+1;				/* Variable to save position of first space character */
	if(strlen(a_string_Ptr) > NUMBER_OF_LCD_COLS){			/* Check if screen will display more than 1 row of data */
		for (int i = NUMBER_OF_LCD_COLS-1; i >= 0; i--){	/* Pass through the string to find last space before new line */
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	9a 81       	ldd	r25, Y+2	; 0x02
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	9a 83       	std	Y+2, r25	; 0x02
    1d46:	89 83       	std	Y+1, r24	; 0x01
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4c:	99 23       	and	r25, r25
    1d4e:	2c f7       	brge	.-54     	; 0x1d1a <LCD_displayString+0x34>
				firstSpace = i+1;							/* Save location of character after space */
				break;										/* Leave loop to not get a wrong character location */
			}
		}
	}
	uint8 charNum = 0;										/* Iterator to pass through String literals */
    1d50:	1b 82       	std	Y+3, r1	; 0x03
    1d52:	2f c0       	rjmp	.+94     	; 0x1db2 <LCD_displayString+0xcc>
	while (a_string_Ptr[charNum] != '\0'){						/* Pass by string character by character until null character */
		LCD_displayCharacter(a_string_Ptr[charNum++]);			/* call LCD_displayCharacter function for every character in string */
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5e:	fc 01       	movw	r30, r24
    1d60:	e2 0f       	add	r30, r18
    1d62:	f3 1f       	adc	r31, r19
    1d64:	90 81       	ld	r25, Z
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	8f 5f       	subi	r24, 0xFF	; 255
    1d6a:	8b 83       	std	Y+3, r24	; 0x03
    1d6c:	89 2f       	mov	r24, r25
    1d6e:	0e 94 77 0c 	call	0x18ee	; 0x18ee <LCD_displayCharacter>
		if (charNum == firstSpace)							/* Condition to display characters on a new line */
    1d72:	9b 81       	ldd	r25, Y+3	; 0x03
    1d74:	8c 81       	ldd	r24, Y+4	; 0x04
    1d76:	98 17       	cp	r25, r24
    1d78:	e1 f4       	brne	.+56     	; 0x1db2 <LCD_displayString+0xcc>
			LCD_goToRowColumn((charNum+NUMBER_OF_LCD_COLS-1)/NUMBER_OF_LCD_COLS, 0);	/* Put cursor on needed location to continue display */
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	88 2f       	mov	r24, r24
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	0f 96       	adiw	r24, 0x0f	; 15
    1d82:	98 87       	std	Y+8, r25	; 0x08
    1d84:	8f 83       	std	Y+7, r24	; 0x07
    1d86:	8f 81       	ldd	r24, Y+7	; 0x07
    1d88:	98 85       	ldd	r25, Y+8	; 0x08
    1d8a:	99 23       	and	r25, r25
    1d8c:	2c f4       	brge	.+10     	; 0x1d98 <LCD_displayString+0xb2>
    1d8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d90:	98 85       	ldd	r25, Y+8	; 0x08
    1d92:	0f 96       	adiw	r24, 0x0f	; 15
    1d94:	98 87       	std	Y+8, r25	; 0x08
    1d96:	8f 83       	std	Y+7, r24	; 0x07
    1d98:	8f 81       	ldd	r24, Y+7	; 0x07
    1d9a:	98 85       	ldd	r25, Y+8	; 0x08
    1d9c:	95 95       	asr	r25
    1d9e:	87 95       	ror	r24
    1da0:	95 95       	asr	r25
    1da2:	87 95       	ror	r24
    1da4:	95 95       	asr	r25
    1da6:	87 95       	ror	r24
    1da8:	95 95       	asr	r25
    1daa:	87 95       	ror	r24
    1dac:	60 e0       	ldi	r22, 0x00	; 0
    1dae:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_goToRowColumn>
				break;										/* Leave loop to not get a wrong character location */
			}
		}
	}
	uint8 charNum = 0;										/* Iterator to pass through String literals */
	while (a_string_Ptr[charNum] != '\0'){						/* Pass by string character by character until null character */
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dba:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	e2 0f       	add	r30, r18
    1dc0:	f3 1f       	adc	r31, r19
    1dc2:	80 81       	ld	r24, Z
    1dc4:	88 23       	and	r24, r24
    1dc6:	31 f6       	brne	.-116    	; 0x1d54 <LCD_displayString+0x6e>
		LCD_displayCharacter(a_string_Ptr[charNum++]);			/* call LCD_displayCharacter function for every character in string */
		if (charNum == firstSpace)							/* Condition to display characters on a new line */
			LCD_goToRowColumn((charNum+NUMBER_OF_LCD_COLS-1)/NUMBER_OF_LCD_COLS, 0);	/* Put cursor on needed location to continue display */
	}
}
    1dc8:	28 96       	adiw	r28, 0x08	; 8
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	de bf       	out	0x3e, r29	; 62
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	cd bf       	out	0x3d, r28	; 61
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	08 95       	ret

00001dda <LCD_goToRowColumn>:
 * 		[IN] unsigned char a_col
 * 					: Column to put cursor on on LCD
 *
 * [Returns]		: N/A
 *******************************************************************************/
void LCD_goToRowColumn(uint8 a_row, uint8 a_col){
    1dda:	df 93       	push	r29
    1ddc:	cf 93       	push	r28
    1dde:	00 d0       	rcall	.+0      	; 0x1de0 <LCD_goToRowColumn+0x6>
    1de0:	00 d0       	rcall	.+0      	; 0x1de2 <LCD_goToRowColumn+0x8>
    1de2:	0f 92       	push	r0
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	8a 83       	std	Y+2, r24	; 0x02
    1dea:	6b 83       	std	Y+3, r22	; 0x03
	uint8 positionAddress;					/* Variable to store address of position to start display */
	switch(a_row){							/* Start calculating address using row position */
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	3d 83       	std	Y+5, r19	; 0x05
    1df4:	2c 83       	std	Y+4, r18	; 0x04
    1df6:	8c 81       	ldd	r24, Y+4	; 0x04
    1df8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	31 f0       	breq	.+12     	; 0x1e0a <LCD_goToRowColumn+0x30>
    1dfe:	2c 81       	ldd	r18, Y+4	; 0x04
    1e00:	3d 81       	ldd	r19, Y+5	; 0x05
    1e02:	21 30       	cpi	r18, 0x01	; 1
    1e04:	31 05       	cpc	r19, r1
    1e06:	21 f0       	breq	.+8      	; 0x1e10 <LCD_goToRowColumn+0x36>
    1e08:	07 c0       	rjmp	.+14     	; 0x1e18 <LCD_goToRowColumn+0x3e>
	case 0:
		positionAddress = a_col;			/* Add to row position column position to get final address */
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	06 c0       	rjmp	.+12     	; 0x1e1c <LCD_goToRowColumn+0x42>
		break;
	case 1:
		positionAddress = a_col + 0x40;		/* Add to row position column position to get final address */
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	80 5c       	subi	r24, 0xC0	; 192
    1e14:	89 83       	std	Y+1, r24	; 0x01
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <LCD_goToRowColumn+0x42>
	case 3:
		positionAddress = a_col + 0x50;		/* Add to row position column position to get final address */
		break;
#endif
	default:
		positionAddress = a_col;			/* Display on first row if provided row is invalid */
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_sendCommand(LCD_COMMAND_SET_CURSOR_POSITION | positionAddress);		/* Send the required position to LCD */
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	80 68       	ori	r24, 0x80	; 128
    1e20:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <LCD_sendCommand>
}
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <LCD_displayStringRowColumn>:
 * 		[IN] const unsigned char *a_string_Ptr
 * 					: String to display on the screen
 *
 * [Returns]		: N/A
 *******************************************************************************/
void LCD_displayStringRowColumn(uint8 a_row, uint8 a_col, const uint8 *a_string_Ptr){
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	00 d0       	rcall	.+0      	; 0x1e3a <LCD_displayStringRowColumn+0x6>
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <LCD_displayStringRowColumn+0x8>
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	89 83       	std	Y+1, r24	; 0x01
    1e42:	6a 83       	std	Y+2, r22	; 0x02
    1e44:	5c 83       	std	Y+4, r21	; 0x04
    1e46:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(a_row, a_col);	/* Call LCD_goToRowColumn set string display start position */
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	6a 81       	ldd	r22, Y+2	; 0x02
    1e4c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_goToRowColumn>
	LCD_displayString(a_string_Ptr);		/* Call LCD_displayString to start displaying string */
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_displayString>
}
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <LCD_clearScreen>:
 * [Function Name]	: LCD_clearScreen
 * [Description]	: Clear screen
 * [Args]			: N/A
 * [Returns]		: N/A
 *******************************************************************************/
void LCD_clearScreen(void){
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_COMMAND_CLEAR_DISPLAY);		/* Send command to clear LCD */
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <LCD_sendCommand>
}
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	08 95       	ret

00001e7a <LCD_displayStringOnNewScreen>:
 * 		[IN] const unsigned char *a_string_Ptr
 * 					: String to display on the screen
 *
 * [Returns]		: N/A
 *******************************************************************************/
void LCD_displayStringOnNewScreen(const uint8 *a_string_Ptr){
    1e7a:	df 93       	push	r29
    1e7c:	cf 93       	push	r28
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <LCD_displayStringOnNewScreen+0x6>
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();				/* Clear LCD Screen */
    1e88:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <LCD_clearScreen>
	LCD_displayString(a_string_Ptr);	/* Display string on LCD */
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e90:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_displayString>
}
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <LCD_integerToString>:
 * 		[IN] signed long a_data
 * 					: Integer to display on the screen
 *
 * [Returns]		: N/A
 *******************************************************************************/
void LCD_integerToString(sint32 a_data){
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	64 97       	sbiw	r28, 0x14	; 20
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	cd bf       	out	0x3d, r28	; 61
    1eb2:	69 8b       	std	Y+17, r22	; 0x11
    1eb4:	7a 8b       	std	Y+18, r23	; 0x12
    1eb6:	8b 8b       	std	Y+19, r24	; 0x13
    1eb8:	9c 8b       	std	Y+20, r25	; 0x14
	char buff[16]; 					/* String to hold conversion result  */
	itoa(a_data,buff,10); 			/* integer to ASCII to convert a_data to ASCII with base 10 */
    1eba:	89 89       	ldd	r24, Y+17	; 0x11
    1ebc:	9a 89       	ldd	r25, Y+18	; 0x12
    1ebe:	ab 89       	ldd	r26, Y+19	; 0x13
    1ec0:	bc 89       	ldd	r27, Y+20	; 0x14
    1ec2:	bc 01       	movw	r22, r24
    1ec4:	cd 01       	movw	r24, r26
    1ec6:	9e 01       	movw	r18, r28
    1ec8:	2f 5f       	subi	r18, 0xFF	; 255
    1eca:	3f 4f       	sbci	r19, 0xFF	; 255
    1ecc:	a9 01       	movw	r20, r18
    1ece:	2a e0       	ldi	r18, 0x0A	; 10
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	0e 94 da 11 	call	0x23b4	; 0x23b4 <itoa>
	LCD_displayString(buff);		/* Call LCD_displayString to start displaying integer */
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	01 96       	adiw	r24, 0x01	; 1
    1eda:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_displayString>
}
    1ede:	64 96       	adiw	r28, 0x14	; 20
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	cd bf       	out	0x3d, r28	; 61
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <__vector_6>:
 * [ISR Name]		: TIMER1_COMPA_vect
 * [Description]	: ISR for time calculation using Timer 1
 * [Args]			: N/A
 * [Returns]		: N/A
 *******************************************************************************/
ISR(TIMER1_COMPA_vect){
    1ef0:	1f 92       	push	r1
    1ef2:	0f 92       	push	r0
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	0f 92       	push	r0
    1ef8:	11 24       	eor	r1, r1
    1efa:	8f 93       	push	r24
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
	g_timePassed++;		/* Increment number of seconds passed */
    1f04:	80 91 99 01 	lds	r24, 0x0199
    1f08:	8f 5f       	subi	r24, 0xFF	; 255
    1f0a:	80 93 99 01 	sts	0x0199, r24
}
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	8f 91       	pop	r24
    1f14:	0f 90       	pop	r0
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	0f 90       	pop	r0
    1f1a:	1f 90       	pop	r1
    1f1c:	18 95       	reti

00001f1e <TIMER1_init>:
 * 		[IN] const TIMERS_ConfigType * a_s_configuration_Ptr
 * 					: Pointer to structure containing timer configuration
 *
 * [Returns]		: N/A
 *******************************************************************************/
void TIMER1_init(const TIMERS_ConfigType * a_s_configuration_Ptr){
    1f1e:	ff 92       	push	r15
    1f20:	0f 93       	push	r16
    1f22:	1f 93       	push	r17
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	00 d0       	rcall	.+0      	; 0x1f2a <TIMER1_init+0xc>
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	9a 83       	std	Y+2, r25	; 0x02
    1f30:	89 83       	std	Y+1, r24	; 0x01
	 * COM1B1:0:	Compare Output Mode for Channel B		-> Compare output mode B control from configuration provided
	 * FOC1A:		Force Output Compare for Channel A		-> Force output compare A calculated from configuration provided
	 * FOC1B:		Force Output Compare for Channel B		-> Force output compare B calculated from configuration provided
	 * WGM11:0:		Waveform Generation Mode				-> Waveform generation mode control from configuration provided
	 */
	TCCR1A = (a_s_configuration_Ptr->compareMatchA << COM1A0) |
    1f32:	0f e4       	ldi	r16, 0x4F	; 79
    1f34:	10 e0       	ldi	r17, 0x00	; 0
    1f36:	e9 81       	ldd	r30, Y+1	; 0x01
    1f38:	fa 81       	ldd	r31, Y+2	; 0x02
    1f3a:	86 81       	ldd	r24, Z+6	; 0x06
    1f3c:	83 70       	andi	r24, 0x03	; 3
    1f3e:	88 2f       	mov	r24, r24
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	00 24       	eor	r0, r0
    1f44:	96 95       	lsr	r25
    1f46:	87 95       	ror	r24
    1f48:	07 94       	ror	r0
    1f4a:	96 95       	lsr	r25
    1f4c:	87 95       	ror	r24
    1f4e:	07 94       	ror	r0
    1f50:	98 2f       	mov	r25, r24
    1f52:	80 2d       	mov	r24, r0
    1f54:	28 2f       	mov	r18, r24
    1f56:	e9 81       	ldd	r30, Y+1	; 0x01
    1f58:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5a:	87 81       	ldd	r24, Z+7	; 0x07
    1f5c:	83 70       	andi	r24, 0x03	; 3
    1f5e:	88 2f       	mov	r24, r24
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	82 95       	swap	r24
    1f64:	92 95       	swap	r25
    1f66:	90 7f       	andi	r25, 0xF0	; 240
    1f68:	98 27       	eor	r25, r24
    1f6a:	80 7f       	andi	r24, 0xF0	; 240
    1f6c:	98 27       	eor	r25, r24
    1f6e:	f2 2e       	mov	r15, r18
    1f70:	f8 2a       	or	r15, r24
    1f72:	e9 81       	ldd	r30, Y+1	; 0x01
    1f74:	fa 81       	ldd	r31, Y+2	; 0x02
    1f76:	84 81       	ldd	r24, Z+4	; 0x04
    1f78:	8f 70       	andi	r24, 0x0F	; 15
    1f7a:	0e 94 11 10 	call	0x2022	; 0x2022 <FOC1X>
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	88 0f       	add	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	88 0f       	add	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	88 0f       	add	r24, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	f8 2a       	or	r15, r24
    1f90:	e9 81       	ldd	r30, Y+1	; 0x01
    1f92:	fa 81       	ldd	r31, Y+2	; 0x02
    1f94:	84 81       	ldd	r24, Z+4	; 0x04
    1f96:	8f 70       	andi	r24, 0x0F	; 15
    1f98:	0e 94 11 10 	call	0x2022	; 0x2022 <FOC1X>
    1f9c:	88 2f       	mov	r24, r24
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	88 0f       	add	r24, r24
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	9f 2d       	mov	r25, r15
    1faa:	98 2b       	or	r25, r24
    1fac:	e9 81       	ldd	r30, Y+1	; 0x01
    1fae:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb0:	84 81       	ldd	r24, Z+4	; 0x04
    1fb2:	8f 70       	andi	r24, 0x0F	; 15
    1fb4:	83 70       	andi	r24, 0x03	; 3
    1fb6:	89 2b       	or	r24, r25
    1fb8:	f8 01       	movw	r30, r16
    1fba:	80 83       	st	Z, r24
	 * ICES1:	Input Capture Edge Select		-> Select edge used to trigger a capture event on ICP1 pin
	 * BIT5:	Reserved Bit					-> (Read Only)
	 * WGM13:2:	Waveform Generation Mode		-> Waveform generation mode control from configuration provided
	 * CS12:0:	Clock Select					-> Prescaler control from configuration provided
	 */
	TCCR1B = (((a_s_configuration_Ptr->waveForm & 0x0C) >> 2) << WGM12) |
    1fbc:	ae e4       	ldi	r26, 0x4E	; 78
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc4:	84 81       	ldd	r24, Z+4	; 0x04
    1fc6:	8f 70       	andi	r24, 0x0F	; 15
    1fc8:	88 2f       	mov	r24, r24
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	8c 70       	andi	r24, 0x0C	; 12
    1fce:	90 70       	andi	r25, 0x00	; 0
    1fd0:	95 95       	asr	r25
    1fd2:	87 95       	ror	r24
    1fd4:	95 95       	asr	r25
    1fd6:	87 95       	ror	r24
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	98 2f       	mov	r25, r24
    1fe6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fea:	85 81       	ldd	r24, Z+5	; 0x05
    1fec:	87 70       	andi	r24, 0x07	; 7
    1fee:	89 2b       	or	r24, r25
    1ff0:	8c 93       	st	X, r24
			(a_s_configuration_Ptr->prescaler);

	/* Save timer initial value in global variable */
	g_initialValue = a_s_configuration_Ptr->initialValue;
    1ff2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff6:	80 81       	ld	r24, Z
    1ff8:	91 81       	ldd	r25, Z+1	; 0x01
    1ffa:	90 93 9d 01 	sts	0x019D, r25
    1ffe:	80 93 9c 01 	sts	0x019C, r24

	/* Save timer top value in global variable */
	g_topValue = a_s_configuration_Ptr->topValue;
    2002:	e9 81       	ldd	r30, Y+1	; 0x01
    2004:	fa 81       	ldd	r31, Y+2	; 0x02
    2006:	82 81       	ldd	r24, Z+2	; 0x02
    2008:	93 81       	ldd	r25, Z+3	; 0x03
    200a:	90 93 9b 01 	sts	0x019B, r25
    200e:	80 93 9a 01 	sts	0x019A, r24
}
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	1f 91       	pop	r17
    201c:	0f 91       	pop	r16
    201e:	ff 90       	pop	r15
    2020:	08 95       	ret

00002022 <FOC1X>:
 * 		[IN] enum TIMER_WaveformGenerationMode mode
 * 					: Waveform generation mode to choose FOC value
 *
 * [Returns]		: N/A
 *******************************************************************************/
static inline uint8 FOC1X(TIMER_WaveformGenerationMode mode){
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	00 d0       	rcall	.+0      	; 0x2028 <FOC1X+0x6>
    2028:	00 d0       	rcall	.+0      	; 0x202a <FOC1X+0x8>
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	89 83       	std	Y+1, r24	; 0x01
	/* Control FOC1X bit value according to chosen waveform generation mode */
	switch(mode){
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	28 2f       	mov	r18, r24
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	3c 83       	std	Y+4, r19	; 0x04
    2038:	2b 83       	std	Y+3, r18	; 0x03
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	9c 81       	ldd	r25, Y+4	; 0x04
    203e:	84 30       	cpi	r24, 0x04	; 4
    2040:	91 05       	cpc	r25, r1
    2042:	49 f0       	breq	.+18     	; 0x2056 <FOC1X+0x34>
    2044:	2b 81       	ldd	r18, Y+3	; 0x03
    2046:	3c 81       	ldd	r19, Y+4	; 0x04
    2048:	2c 30       	cpi	r18, 0x0C	; 12
    204a:	31 05       	cpc	r19, r1
    204c:	21 f0       	breq	.+8      	; 0x2056 <FOC1X+0x34>
    204e:	8b 81       	ldd	r24, Y+3	; 0x03
    2050:	9c 81       	ldd	r25, Y+4	; 0x04
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	19 f4       	brne	.+6      	; 0x205c <FOC1X+0x3a>
	case 0:			/* NORMAL_COUNTING */
	case 4:			/* CLEAR_TIMER_COMPARE_OCR1A */
	case 12:		/* CLEAR_TIMER_COMPARE_ICR1 */
		return 1;
    2056:	91 e0       	ldi	r25, 0x01	; 1
    2058:	9a 83       	std	Y+2, r25	; 0x02
    205a:	01 c0       	rjmp	.+2      	; 0x205e <FOC1X+0x3c>
	default:		/* Any PWM mode */
		return 0;
    205c:	1a 82       	std	Y+2, r1	; 0x02
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	08 95       	ret

0000206e <TIMER1_start>:
 * [Function Name]	: TIMER1_start
 * [Description]	: Start timer 1 functionality
 * [Args]			: N/A
 * [Returns]		: N/A
 *******************************************************************************/
void TIMER1_start(){
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62

	/* Reset time to 0 to start a new clock */
	g_timePassed = 0;
    2076:	10 92 99 01 	sts	0x0199, r1

	/* Set top value in ICR1 register */
	ICR1 = g_topValue;
    207a:	e6 e4       	ldi	r30, 0x46	; 70
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 91 9a 01 	lds	r24, 0x019A
    2082:	90 91 9b 01 	lds	r25, 0x019B
    2086:	91 83       	std	Z+1, r25	; 0x01
    2088:	80 83       	st	Z, r24

	/* Set Start value in TCNT1 register */
	TCNT1 = g_initialValue;
    208a:	ec e4       	ldi	r30, 0x4C	; 76
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 91 9c 01 	lds	r24, 0x019C
    2092:	90 91 9d 01 	lds	r25, 0x019D
    2096:	91 83       	std	Z+1, r25	; 0x01
    2098:	80 83       	st	Z, r24

	/* Clear INT flag for safety */
	SET_BIT(TIFR, OCF1A);
    209a:	a8 e5       	ldi	r26, 0x58	; 88
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e8 e5       	ldi	r30, 0x58	; 88
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	80 61       	ori	r24, 0x10	; 16
    20a6:	8c 93       	st	X, r24

	/* Enable timer 1 output compare interrupt to restart calculating time */
	SET_BIT(TIMSK, OCIE1A);
    20a8:	a9 e5       	ldi	r26, 0x59	; 89
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e9 e5       	ldi	r30, 0x59	; 89
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	80 61       	ori	r24, 0x10	; 16
    20b4:	8c 93       	st	X, r24
}
    20b6:	cf 91       	pop	r28
    20b8:	df 91       	pop	r29
    20ba:	08 95       	ret

000020bc <TIMER1_stop>:
 * [Function Name]	: TIMER1_stop
 * [Description]	: Stop timer 1 functionality
 * [Args]			: N/A
 * [Returns]		: N/A
 *******************************************************************************/
void TIMER1_stop(){
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
	/* Disable timer 1 output compare interrupt to stop timer from incrementing */
	CLEAR_BIT(TIMSK, OCIE1A);
    20c4:	a9 e5       	ldi	r26, 0x59	; 89
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	e9 e5       	ldi	r30, 0x59	; 89
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	8f 7e       	andi	r24, 0xEF	; 239
    20d0:	8c 93       	st	X, r24
}
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	08 95       	ret

000020d8 <__vector_11>:
 * [ISR Name]		: USART_RXC_vect
 * [Description]	: ISR to appropriately handle data received through USART
 * [Args]			: N/A
 * [Returns]		: N/A
 *******************************************************************************/
ISR(USART_RXC_vect){
    20d8:	1f 92       	push	r1
    20da:	0f 92       	push	r0
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	0f 92       	push	r0
    20e0:	11 24       	eor	r1, r1
    20e2:	8f 93       	push	r24
    20e4:	ef 93       	push	r30
    20e6:	ff 93       	push	r31
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
	g_recievedData = UDR;			/* Store data received in a global variable */
    20f0:	ec e2       	ldi	r30, 0x2C	; 44
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	80 93 9e 01 	sts	0x019E, r24
	if (g_recievedData == '~'){		/* Check if data received is a String */
    20fa:	80 91 9e 01 	lds	r24, 0x019E
    20fe:	8e 37       	cpi	r24, 0x7E	; 126
    2100:	19 f4       	brne	.+6      	; 0x2108 <__vector_11+0x30>
		g_receiveStringFlag = 1;	/* Raise the String flag */
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	80 93 92 01 	sts	0x0192, r24
	}
}
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	ff 91       	pop	r31
    210e:	ef 91       	pop	r30
    2110:	8f 91       	pop	r24
    2112:	0f 90       	pop	r0
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	0f 90       	pop	r0
    2118:	1f 90       	pop	r1
    211a:	18 95       	reti

0000211c <USART_init>:
 * 		[IN] const Usart_ConfigType * a_s_configuration_Ptr
 * 					: Pointer to structure containing USART configuration
 *
 * [Returns]		: N/A
 *******************************************************************************/
void USART_init(const Usart_ConfigType * a_s_configuration_Ptr){
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	00 d0       	rcall	.+0      	; 0x2122 <USART_init+0x6>
    2122:	00 d0       	rcall	.+0      	; 0x2124 <USART_init+0x8>
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	9c 83       	std	Y+4, r25	; 0x04
    212a:	8b 83       	std	Y+3, r24	; 0x03
	 * DOR: 	Data OverRun 							-> (Read Only)
	 * PE:		Parity Error 							-> (Read Only)
	 * U2X= 1	USART Double Transmission Speed			-> Activate double speed transmission mode
	 * MPCM= 0	Multi-processor Communication Mode		-> Un-need for single processor
	 */
	UCSRA = (HIGH << U2X);
    212c:	eb e2       	ldi	r30, 0x2B	; 43
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	82 e0       	ldi	r24, 0x02	; 2
    2132:	80 83       	st	Z, r24
	 * TXEN= 1	Transmitter Enable							-> Enable TX pin on MCU
	 * UCSZ2: 	Character Size								-> Character size control from configuration provided
	 * RXB8: 	Receive Data Bit 8							-> (Read Only)
	 * TXB8: 	Transmit Data Bit 8							-> Bit 8 for 9 bit mode
	 */
	UCSRB = (1<<RXEN) | (HIGH << TXEN) |
    2134:	aa e2       	ldi	r26, 0x2A	; 42
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	eb 81       	ldd	r30, Y+3	; 0x03
    213a:	fc 81       	ldd	r31, Y+4	; 0x04
    213c:	82 81       	ldd	r24, Z+2	; 0x02
    213e:	86 95       	lsr	r24
    2140:	86 95       	lsr	r24
    2142:	86 95       	lsr	r24
    2144:	87 70       	andi	r24, 0x07	; 7
    2146:	84 70       	andi	r24, 0x04	; 4
    2148:	88 61       	ori	r24, 0x18	; 24
    214a:	8c 93       	st	X, r24
	 * UPM1:0: 	Parity Mode			-> Parity control from configuration provided
	 * USBS: 	Stop Bit Select		-> Stop bit control from configuration provided
	 * UCSZ1:0: Character Size		-> Character size control from configuration provided
	 * UCPOL= 0	Clock Polarity		-> Not needed for Async mode
	 */
	UCSRC = (HIGH << URSEL) |
    214c:	a0 e4       	ldi	r26, 0x40	; 64
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	eb 81       	ldd	r30, Y+3	; 0x03
    2152:	fc 81       	ldd	r31, Y+4	; 0x04
    2154:	83 81       	ldd	r24, Z+3	; 0x03
    2156:	83 70       	andi	r24, 0x03	; 3
    2158:	98 2f       	mov	r25, r24
    215a:	92 95       	swap	r25
    215c:	90 7f       	andi	r25, 0xF0	; 240
    215e:	eb 81       	ldd	r30, Y+3	; 0x03
    2160:	fc 81       	ldd	r31, Y+4	; 0x04
    2162:	83 81       	ldd	r24, Z+3	; 0x03
    2164:	82 95       	swap	r24
    2166:	8f 70       	andi	r24, 0x0F	; 15
    2168:	81 70       	andi	r24, 0x01	; 1
    216a:	88 0f       	add	r24, r24
    216c:	88 0f       	add	r24, r24
    216e:	88 0f       	add	r24, r24
    2170:	98 2b       	or	r25, r24
    2172:	eb 81       	ldd	r30, Y+3	; 0x03
    2174:	fc 81       	ldd	r31, Y+4	; 0x04
    2176:	82 81       	ldd	r24, Z+2	; 0x02
    2178:	86 95       	lsr	r24
    217a:	86 95       	lsr	r24
    217c:	86 95       	lsr	r24
    217e:	87 70       	andi	r24, 0x07	; 7
    2180:	83 70       	andi	r24, 0x03	; 3
    2182:	88 0f       	add	r24, r24
    2184:	89 2b       	or	r24, r25
    2186:	80 68       	ori	r24, 0x80	; 128
    2188:	8c 93       	st	X, r24
			((a_s_configuration_Ptr->parity) << UPM0) |
			(a_s_configuration_Ptr->stopBit << USBS)|
			((a_s_configuration_Ptr->charSize & 3) << UCSZ0);	//TODO:Sync or Async, hal3ab feiha?

	/* Calculate UBRR value according to input Baud and MCU frequency */
	uint16 UBRR = UBRR(F_CPU, a_s_configuration_Ptr->baudRate);
    218a:	eb 81       	ldd	r30, Y+3	; 0x03
    218c:	fc 81       	ldd	r31, Y+4	; 0x04
    218e:	80 81       	ld	r24, Z
    2190:	91 81       	ldd	r25, Z+1	; 0x01
    2192:	22 81       	ldd	r18, Z+2	; 0x02
    2194:	a2 2f       	mov	r26, r18
    2196:	a1 70       	andi	r26, 0x01	; 1
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	88 0f       	add	r24, r24
    219c:	99 1f       	adc	r25, r25
    219e:	aa 1f       	adc	r26, r26
    21a0:	bb 1f       	adc	r27, r27
    21a2:	88 0f       	add	r24, r24
    21a4:	99 1f       	adc	r25, r25
    21a6:	aa 1f       	adc	r26, r26
    21a8:	bb 1f       	adc	r27, r27
    21aa:	88 0f       	add	r24, r24
    21ac:	99 1f       	adc	r25, r25
    21ae:	aa 1f       	adc	r26, r26
    21b0:	bb 1f       	adc	r27, r27
    21b2:	9c 01       	movw	r18, r24
    21b4:	ad 01       	movw	r20, r26
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	92 e1       	ldi	r25, 0x12	; 18
    21ba:	aa e7       	ldi	r26, 0x7A	; 122
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	bc 01       	movw	r22, r24
    21c0:	cd 01       	movw	r24, r26
    21c2:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__udivmodsi4>
    21c6:	da 01       	movw	r26, r20
    21c8:	c9 01       	movw	r24, r18
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	9a 83       	std	Y+2, r25	; 0x02
    21ce:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * URSEL= 0		Register Select				-> Set to zero to access UBRRH register
	 * BIT14:12:	Reserved bits				-> (Read Only)
	 * UBRR11:0:	USART Baud Rate Register	-> Set Baud Rate according to calculated value
	 */
	UBRRH = (uint8)(UBRR >> 8);
    21d0:	e0 e4       	ldi	r30, 0x40	; 64
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	9a 81       	ldd	r25, Y+2	; 0x02
    21d8:	89 2f       	mov	r24, r25
    21da:	99 27       	eor	r25, r25
    21dc:	80 83       	st	Z, r24
	UBRRL = (uint8)UBRR;
    21de:	e9 e2       	ldi	r30, 0x29	; 41
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	80 83       	st	Z, r24
}
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <USART_sendByte>:
 * 		[IN] const unsigned char a_data
 * 					: Byte to send to other device
 *
 * [Returns]		: N/A
 *******************************************************************************/
void USART_sendByte(const uint8 a_data){
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	0f 92       	push	r0
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	89 83       	std	Y+1, r24	; 0x01
	//TODO: Adjust for 9 bits
	/* Wait for UDRE flag to be set before writing data for transmission */
	while(BIT_IS_CLEAR(UCSRA, UDRE));
    2200:	eb e2       	ldi	r30, 0x2B	; 43
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	88 2f       	mov	r24, r24
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	80 72       	andi	r24, 0x20	; 32
    220c:	90 70       	andi	r25, 0x00	; 0
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	b9 f3       	breq	.-18     	; 0x2200 <USART_sendByte+0xc>
	/* Write data to UDR to send using USART */
	UDR = a_data;
    2212:	ec e2       	ldi	r30, 0x2C	; 44
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	80 83       	st	Z, r24
}
    221a:	0f 90       	pop	r0
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <USART_receiveByte>:
 * [Function Name]	: USART_receiveByte
 * [Description]	: Receive byte through USART
 * [Args]			: N/A
 * [Returns]		: Byte received from other device
 *******************************************************************************/
uint8 USART_receiveByte(void){
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62

	/* Wait for RXC flag to be set before reading data received */
	while(BIT_IS_CLEAR(UCSRA, RXC));
    222a:	eb e2       	ldi	r30, 0x2B	; 43
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	88 23       	and	r24, r24
    2232:	dc f7       	brge	.-10     	; 0x222a <USART_receiveByte+0x8>
	/* Read data currently in UDR */
	return UDR;
    2234:	ec e2       	ldi	r30, 0x2C	; 44
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
}
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	08 95       	ret

00002240 <USART_sendString>:
 * 		[IN] const unsigned char *a_string_Ptr
 * 					: String to send to other device
 *
 * [Returns]		: N/A
 *******************************************************************************/
void USART_sendString(const uint8 *a_string_Ptr){
    2240:	df 93       	push	r29
    2242:	cf 93       	push	r28
    2244:	00 d0       	rcall	.+0      	; 0x2246 <USART_sendString+0x6>
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	9a 83       	std	Y+2, r25	; 0x02
    224c:	89 83       	std	Y+1, r24	; 0x01
    224e:	0b c0       	rjmp	.+22     	; 0x2266 <USART_sendString+0x26>
	/* Send String start symbol */
//	USART_sendByte('~');
	/* Pass by String characters until we reach null terminator */
	while (*a_string_Ptr != '\0'){
		/* Send current character in String */
		USART_sendByte(*a_string_Ptr++);
    2250:	e9 81       	ldd	r30, Y+1	; 0x01
    2252:	fa 81       	ldd	r31, Y+2	; 0x02
    2254:	20 81       	ld	r18, Z
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	9a 81       	ldd	r25, Y+2	; 0x02
    225a:	01 96       	adiw	r24, 0x01	; 1
    225c:	9a 83       	std	Y+2, r25	; 0x02
    225e:	89 83       	std	Y+1, r24	; 0x01
    2260:	82 2f       	mov	r24, r18
    2262:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <USART_sendByte>
 *******************************************************************************/
void USART_sendString(const uint8 *a_string_Ptr){
	/* Send String start symbol */
//	USART_sendByte('~');
	/* Pass by String characters until we reach null terminator */
	while (*a_string_Ptr != '\0'){
    2266:	e9 81       	ldd	r30, Y+1	; 0x01
    2268:	fa 81       	ldd	r31, Y+2	; 0x02
    226a:	80 81       	ld	r24, Z
    226c:	88 23       	and	r24, r24
    226e:	81 f7       	brne	.-32     	; 0x2250 <USART_sendString+0x10>
		/* Send current character in String */
		USART_sendByte(*a_string_Ptr++);
	}
	/* Send null terminator for String */
	USART_sendByte('\0');
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <USART_sendByte>
}
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	08 95       	ret

00002280 <USART_receiveString>:
 * 		[OUT] unsigned char *a_string_Ptr
 * 					: String to receive from other device
 *
 * [Returns]		: N/A
 *******************************************************************************/
void USART_receiveString(uint8 *a_string_Ptr){
    2280:	0f 93       	push	r16
    2282:	1f 93       	push	r17
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	00 d0       	rcall	.+0      	; 0x228a <USART_receiveString+0xa>
    228a:	0f 92       	push	r0
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    2290:	9b 83       	std	Y+3, r25	; 0x03
    2292:	8a 83       	std	Y+2, r24	; 0x02
	/* iterator to save string in a_string_Ptr */
	uint8 charNum = 0;
    2294:	19 82       	std	Y+1, r1	; 0x01
	/* Pass by String characters until we reach null terminator */
	do {
		/* Save character received to the string provided */
		a_string_Ptr[charNum++] = USART_receiveByte();
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	28 2f       	mov	r18, r24
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	9b 81       	ldd	r25, Y+3	; 0x03
    22a0:	8c 01       	movw	r16, r24
    22a2:	02 0f       	add	r16, r18
    22a4:	13 1f       	adc	r17, r19
    22a6:	0e 94 11 11 	call	0x2222	; 0x2222 <USART_receiveByte>
    22aa:	f8 01       	movw	r30, r16
    22ac:	80 83       	st	Z, r24
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	8f 5f       	subi	r24, 0xFF	; 255
    22b2:	89 83       	std	Y+1, r24	; 0x01
	/* Keep Passing until string last character is null terminator */
	}while(a_string_Ptr[charNum-1] != '\0');
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	88 2f       	mov	r24, r24
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	9c 01       	movw	r18, r24
    22bc:	21 50       	subi	r18, 0x01	; 1
    22be:	30 40       	sbci	r19, 0x00	; 0
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	9b 81       	ldd	r25, Y+3	; 0x03
    22c4:	fc 01       	movw	r30, r24
    22c6:	e2 0f       	add	r30, r18
    22c8:	f3 1f       	adc	r31, r19
    22ca:	80 81       	ld	r24, Z
    22cc:	88 23       	and	r24, r24
    22ce:	19 f7       	brne	.-58     	; 0x2296 <USART_receiveString+0x16>
}
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	cf 91       	pop	r28
    22d8:	df 91       	pop	r29
    22da:	1f 91       	pop	r17
    22dc:	0f 91       	pop	r16
    22de:	08 95       	ret

000022e0 <__udivmodsi4>:
    22e0:	a1 e2       	ldi	r26, 0x21	; 33
    22e2:	1a 2e       	mov	r1, r26
    22e4:	aa 1b       	sub	r26, r26
    22e6:	bb 1b       	sub	r27, r27
    22e8:	fd 01       	movw	r30, r26
    22ea:	0d c0       	rjmp	.+26     	; 0x2306 <__udivmodsi4_ep>

000022ec <__udivmodsi4_loop>:
    22ec:	aa 1f       	adc	r26, r26
    22ee:	bb 1f       	adc	r27, r27
    22f0:	ee 1f       	adc	r30, r30
    22f2:	ff 1f       	adc	r31, r31
    22f4:	a2 17       	cp	r26, r18
    22f6:	b3 07       	cpc	r27, r19
    22f8:	e4 07       	cpc	r30, r20
    22fa:	f5 07       	cpc	r31, r21
    22fc:	20 f0       	brcs	.+8      	; 0x2306 <__udivmodsi4_ep>
    22fe:	a2 1b       	sub	r26, r18
    2300:	b3 0b       	sbc	r27, r19
    2302:	e4 0b       	sbc	r30, r20
    2304:	f5 0b       	sbc	r31, r21

00002306 <__udivmodsi4_ep>:
    2306:	66 1f       	adc	r22, r22
    2308:	77 1f       	adc	r23, r23
    230a:	88 1f       	adc	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	1a 94       	dec	r1
    2310:	69 f7       	brne	.-38     	; 0x22ec <__udivmodsi4_loop>
    2312:	60 95       	com	r22
    2314:	70 95       	com	r23
    2316:	80 95       	com	r24
    2318:	90 95       	com	r25
    231a:	9b 01       	movw	r18, r22
    231c:	ac 01       	movw	r20, r24
    231e:	bd 01       	movw	r22, r26
    2320:	cf 01       	movw	r24, r30
    2322:	08 95       	ret

00002324 <__prologue_saves__>:
    2324:	2f 92       	push	r2
    2326:	3f 92       	push	r3
    2328:	4f 92       	push	r4
    232a:	5f 92       	push	r5
    232c:	6f 92       	push	r6
    232e:	7f 92       	push	r7
    2330:	8f 92       	push	r8
    2332:	9f 92       	push	r9
    2334:	af 92       	push	r10
    2336:	bf 92       	push	r11
    2338:	cf 92       	push	r12
    233a:	df 92       	push	r13
    233c:	ef 92       	push	r14
    233e:	ff 92       	push	r15
    2340:	0f 93       	push	r16
    2342:	1f 93       	push	r17
    2344:	cf 93       	push	r28
    2346:	df 93       	push	r29
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	ca 1b       	sub	r28, r26
    234e:	db 0b       	sbc	r29, r27
    2350:	0f b6       	in	r0, 0x3f	; 63
    2352:	f8 94       	cli
    2354:	de bf       	out	0x3e, r29	; 62
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	cd bf       	out	0x3d, r28	; 61
    235a:	09 94       	ijmp

0000235c <__epilogue_restores__>:
    235c:	2a 88       	ldd	r2, Y+18	; 0x12
    235e:	39 88       	ldd	r3, Y+17	; 0x11
    2360:	48 88       	ldd	r4, Y+16	; 0x10
    2362:	5f 84       	ldd	r5, Y+15	; 0x0f
    2364:	6e 84       	ldd	r6, Y+14	; 0x0e
    2366:	7d 84       	ldd	r7, Y+13	; 0x0d
    2368:	8c 84       	ldd	r8, Y+12	; 0x0c
    236a:	9b 84       	ldd	r9, Y+11	; 0x0b
    236c:	aa 84       	ldd	r10, Y+10	; 0x0a
    236e:	b9 84       	ldd	r11, Y+9	; 0x09
    2370:	c8 84       	ldd	r12, Y+8	; 0x08
    2372:	df 80       	ldd	r13, Y+7	; 0x07
    2374:	ee 80       	ldd	r14, Y+6	; 0x06
    2376:	fd 80       	ldd	r15, Y+5	; 0x05
    2378:	0c 81       	ldd	r16, Y+4	; 0x04
    237a:	1b 81       	ldd	r17, Y+3	; 0x03
    237c:	aa 81       	ldd	r26, Y+2	; 0x02
    237e:	b9 81       	ldd	r27, Y+1	; 0x01
    2380:	ce 0f       	add	r28, r30
    2382:	d1 1d       	adc	r29, r1
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	f8 94       	cli
    2388:	de bf       	out	0x3e, r29	; 62
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	cd bf       	out	0x3d, r28	; 61
    238e:	ed 01       	movw	r28, r26
    2390:	08 95       	ret

00002392 <isspace>:
    2392:	91 11       	cpse	r25, r1
    2394:	30 c0       	rjmp	.+96     	; 0x23f6 <__ctype_isfalse>
    2396:	80 32       	cpi	r24, 0x20	; 32
    2398:	19 f0       	breq	.+6      	; 0x23a0 <isspace+0xe>
    239a:	89 50       	subi	r24, 0x09	; 9
    239c:	85 50       	subi	r24, 0x05	; 5
    239e:	d0 f7       	brcc	.-12     	; 0x2394 <isspace+0x2>
    23a0:	08 95       	ret

000023a2 <strlen>:
    23a2:	fc 01       	movw	r30, r24
    23a4:	01 90       	ld	r0, Z+
    23a6:	00 20       	and	r0, r0
    23a8:	e9 f7       	brne	.-6      	; 0x23a4 <strlen+0x2>
    23aa:	80 95       	com	r24
    23ac:	90 95       	com	r25
    23ae:	8e 0f       	add	r24, r30
    23b0:	9f 1f       	adc	r25, r31
    23b2:	08 95       	ret

000023b4 <itoa>:
    23b4:	fb 01       	movw	r30, r22
    23b6:	9f 01       	movw	r18, r30
    23b8:	e8 94       	clt
    23ba:	42 30       	cpi	r20, 0x02	; 2
    23bc:	c4 f0       	brlt	.+48     	; 0x23ee <itoa+0x3a>
    23be:	45 32       	cpi	r20, 0x25	; 37
    23c0:	b4 f4       	brge	.+44     	; 0x23ee <itoa+0x3a>
    23c2:	4a 30       	cpi	r20, 0x0A	; 10
    23c4:	29 f4       	brne	.+10     	; 0x23d0 <itoa+0x1c>
    23c6:	97 fb       	bst	r25, 7
    23c8:	1e f4       	brtc	.+6      	; 0x23d0 <itoa+0x1c>
    23ca:	90 95       	com	r25
    23cc:	81 95       	neg	r24
    23ce:	9f 4f       	sbci	r25, 0xFF	; 255
    23d0:	64 2f       	mov	r22, r20
    23d2:	77 27       	eor	r23, r23
    23d4:	0e 94 0e 12 	call	0x241c	; 0x241c <__udivmodhi4>
    23d8:	80 5d       	subi	r24, 0xD0	; 208
    23da:	8a 33       	cpi	r24, 0x3A	; 58
    23dc:	0c f0       	brlt	.+2      	; 0x23e0 <itoa+0x2c>
    23de:	89 5d       	subi	r24, 0xD9	; 217
    23e0:	81 93       	st	Z+, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	00 97       	sbiw	r24, 0x00	; 0
    23e6:	a1 f7       	brne	.-24     	; 0x23d0 <itoa+0x1c>
    23e8:	16 f4       	brtc	.+4      	; 0x23ee <itoa+0x3a>
    23ea:	5d e2       	ldi	r21, 0x2D	; 45
    23ec:	51 93       	st	Z+, r21
    23ee:	10 82       	st	Z, r1
    23f0:	c9 01       	movw	r24, r18
    23f2:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <strrev>

000023f6 <__ctype_isfalse>:
    23f6:	99 27       	eor	r25, r25
    23f8:	88 27       	eor	r24, r24

000023fa <__ctype_istrue>:
    23fa:	08 95       	ret

000023fc <strrev>:
    23fc:	dc 01       	movw	r26, r24
    23fe:	fc 01       	movw	r30, r24
    2400:	67 2f       	mov	r22, r23
    2402:	71 91       	ld	r23, Z+
    2404:	77 23       	and	r23, r23
    2406:	e1 f7       	brne	.-8      	; 0x2400 <strrev+0x4>
    2408:	32 97       	sbiw	r30, 0x02	; 2
    240a:	04 c0       	rjmp	.+8      	; 0x2414 <strrev+0x18>
    240c:	7c 91       	ld	r23, X
    240e:	6d 93       	st	X+, r22
    2410:	70 83       	st	Z, r23
    2412:	62 91       	ld	r22, -Z
    2414:	ae 17       	cp	r26, r30
    2416:	bf 07       	cpc	r27, r31
    2418:	c8 f3       	brcs	.-14     	; 0x240c <strrev+0x10>
    241a:	08 95       	ret

0000241c <__udivmodhi4>:
    241c:	aa 1b       	sub	r26, r26
    241e:	bb 1b       	sub	r27, r27
    2420:	51 e1       	ldi	r21, 0x11	; 17
    2422:	07 c0       	rjmp	.+14     	; 0x2432 <__udivmodhi4_ep>

00002424 <__udivmodhi4_loop>:
    2424:	aa 1f       	adc	r26, r26
    2426:	bb 1f       	adc	r27, r27
    2428:	a6 17       	cp	r26, r22
    242a:	b7 07       	cpc	r27, r23
    242c:	10 f0       	brcs	.+4      	; 0x2432 <__udivmodhi4_ep>
    242e:	a6 1b       	sub	r26, r22
    2430:	b7 0b       	sbc	r27, r23

00002432 <__udivmodhi4_ep>:
    2432:	88 1f       	adc	r24, r24
    2434:	99 1f       	adc	r25, r25
    2436:	5a 95       	dec	r21
    2438:	a9 f7       	brne	.-22     	; 0x2424 <__udivmodhi4_loop>
    243a:	80 95       	com	r24
    243c:	90 95       	com	r25
    243e:	bc 01       	movw	r22, r24
    2440:	cd 01       	movw	r24, r26
    2442:	08 95       	ret

00002444 <_exit>:
    2444:	f8 94       	cli

00002446 <__stop_program>:
    2446:	ff cf       	rjmp	.-2      	; 0x2446 <__stop_program>
