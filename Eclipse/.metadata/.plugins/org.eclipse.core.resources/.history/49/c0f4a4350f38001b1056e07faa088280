/******************************************************************************
 *
 * 		Module: Main MCU1 program
 *
 *	 File Name: MCU1.c
 *
 * Description: Source file for the MicroController start point
 *
 * 		Author: Mohamed Mahfouz
 *
 *  Created on: Nov 25, 2020
 *
 *******************************************************************************/

/*******************************************************************************
 *							  INCLUDES	  	   		                           *
 *******************************************************************************/

#include "MCU1.h"

/*******************************************************************************
 *                      Global Variables                              	   	   *
 *******************************************************************************/

uint8 g_password[PASSWORD_LENGTH];

/*******************************************************************************
 *                    	Function Prototypes                            		   *
 *******************************************************************************/

void MCU_init(void);
void resetPasswordContainer(void);
void getPassword(void);
void getAndSendPassword(void);
void raiseError(void);

/*******************************************************************************
 *                      Function Definitions                                   *
 *******************************************************************************/

int main(void){

	g_password[PASSWORD_LENGTH-1] = '\0';
	uint8 setup = TRUE;
	uint8 changePass = FALSE;
	uint8 openDoor = FALSE;
	uint8 actionSymbol = 0;
	MCU_init();
	LCD_displayString("Welcome to your door lock system");
	_delay_ms(2000);
	while(1){

		while(setup){
			LCD_displayStringOnNewScreen("Please set up your pass: ");
			getAndSendPassword();
			LCD_displayStringOnNewScreen("Please confirm pass: ");
			getAndSendPassword();
			if ('!' == USART_receiveByte()){
				setup = FALSE;
				LCD_displayStringOnNewScreen("New password set");
				_delay_ms(2000);
				break;
			}
			else{
				LCD_displayStringOnNewScreen("Passwords do not match");
				_delay_ms(2000);
			}
		}

		while(changePass || openDoor){
			LCD_displayStringOnNewScreen(openDoor ? "Please enter pass: " : "Please enter old pass: ");
			getAndSendPassword();
			uint8 result = USART_receiveByte();
			if ('!' == result){
				if (openDoor){
					openDoor = FALSE;
					unlockSystem();
				}
				else{
					changePass = FALSE;
					setup = TRUE;
				}
				break;
			}
			else if ('E' == result){
				changePass = FALSE;
				openDoor = FALSE;
				raiseError();
				break;
			}
			else{
				LCD_displayStringOnNewScreen("wrong password, Please try again");
				_delay_ms(2000);
			}
		}

		if (setup)
			continue;

		LCD_displayStringOnNewScreen("X Change pass");
		LCD_displayStringRowColumn(1, 0, "- Open door");

		do{
			actionSymbol = KEYPAD_getPressed();
		}while('*' != actionSymbol && '-' != actionSymbol);

		USART_sendByte(actionSymbol);
		if ('*' == actionSymbol){
			changePass = TRUE;
		}
		else if ('-' == actionSymbol){
			openDoor = TRUE;
		}
		actionSymbol = 0;
	}
}

void MCU_init(void){

	Usart_ConfigType usart_configuration = {BAUD_RATE_9600, EIGHT_BITS, DISABLED, ONE_BIT};
	TIMERS_ConfigType timer_configuration = {0, 31250, CLEAR_TIMER_COMPARE_ICR1, FCPU_256, NORMAL_OPERATION, NORMAL_OPERATION};
	cli();
	LCD_init();
	USART_init(&usart_configuration);
	TIMER1_init(&timer_configuration);
	sei();
}

void resetPasswordContainer(void){
	for (int i = 0; i < PASSWORD_LENGTH-1; i++)
		g_password[i] = '*';
}

void getPassword(void){
	uint8 passwordIterator = 0;
	while(passwordIterator != PASSWORD_LENGTH-1){
		g_password[passwordIterator] = KEYPAD_getPressed() + '0';
		if (g_password[passwordIterator] >= '0' && g_password[passwordIterator] <= '9'){
			passwordIterator++;
			LCD_displayCharacter('*');
			_delay_ms(500);
		}
	}
	while ('=' != KEYPAD_getPressed());
}

void getAndSendPassword(void){
	getPassword();
	USART_sendString(g_password);
	resetPasswordContainer();
}

void raiseError(void){
	TIMER1_start();
	LCD_displayStringOnNewScreen("      ERROR     ");
	LCD_displayStringRowColumn(1, 0, "  SYSTEM LOCKED ");
	while(g_timePassed <= 60);
	TIMER1_stop();
}

void unlockSystem(void){
	TIMER1_start();
	LCD_displayStringOnNewScreen("Opening door");
	while(g_timePassed <= 15);
	LCD_displayStringOnNewScreen("Door is open");
	while(g_timePassed <= 18);
	LCD_displayStringOnNewScreen("Closing door");
	while(g_timePassed <= 33);
	TIMER1_stop();
}
